@use "sass:list";
@use "sass:meta";
@use "../settings";
@use "../settings-options" ;
@use "../mixins/breakpoints";
@use "../mixins/text-emphasis";
@use "../mixins/text-truncate";
@use "../vendor/rfs";

// stylelint-disable declaration-no-important

@if settings-options.$enable-utility-text {
  @if settings-options.$enable-utility-text-justify {
    .text-justify { text-align: justify !important; }
  }
  @if settings-options.$enable-utility-text-wrap {
    .text-wrap  { white-space: normal !important; }
  }
  @if settings-options.$enable-utility-text-nowrap {
    .text-nowrap  { white-space: nowrap !important; }
  }

  // Responsive alignment
  @if settings-options.$enable-utility-text-align {
    @each $breakpoint in settings.$utility-text-align-breakpoints {
      $bprule: breakpoints.breakpoint-designator($breakpoint);

      @include breakpoints.media-breakpoint-up($breakpoint) {
        .text#{$bprule}-start  { text-align: left !important; }
        .text#{$bprule}-end    { text-align: right !important; }
        .text#{$bprule}-center { text-align: center !important; }
      }
    }
  }

  // Transformation
  @if settings-options.$enable-utility-text-transform {
    .text-lowercase  { text-transform: lowercase !important; }
    .text-uppercase  { text-transform: uppercase !important; }
    .text-capitalize { text-transform: capitalize !important; }
  }

  // Weight and italics
  @if settings-options.$enable-utility-text-weight {
    @each $size, $dim in settings.$font-weights {
      .font-weight-#{$size} { font-weight: #{$dim} !important; }
    }
  }
  @if settings-options.$enable-utility-text-style {
    .font-italic         { font-style: italic !important; }
    .font-normal         { font-style: normal !important; }
  }

  // Font families
  @if settings-options.$enable-utility-text-family {
    .font-family-sans-serif { font-family: settings.$font-family-sans-serif !important; }
    .font-family-serif      { font-family: settings.$font-family-serif !important; }
    .font-family-monospace  { font-family: settings.$font-family-monospace !important; }
  }

  // Truncated text
  @if settings-options.$enable-utility-text-truncate {
    .text-truncate {
      @include text-truncate.text-truncate();
    }
  }

  // Text decoration
  @if settings-options.$enable-utility-text-decoration {
    .text-decoration-none { text-decoration: none !important; }
    .text-decoration-underline { text-decoration: underline !important; }
    .text-decoration-line-through { text-decoration: line-through !important; }
  }

  // Word break
  @if settings-options.$enable-utility-text-break {
    .text-break {
      word-break: break-word !important;
      word-wrap: break-word !important;
    }
  }

  // Contextual colors
  @if settings-options.$enable-utility-text-colors {
    @if (meta.type-of(settings.$utility-text-colors) == "map" and list.length(settings.$utility-text-colors) != 0) {
      @each $theme, $color in settings.$utility-text-colors {
        @include text-emphasis.text-emphasis-variant(".text-#{$theme}", $color, settings.$level-delta-hover-color);
      }
    }
  }

  // Palette colors
  @if settings.$enable-palette and settings-options.$enable-utility-text-palette {
    $palette-colors-text: settings.$palette-colors !default;
    $palette-levels-text: settings.$palette-levels !default;

    @each $theme, $color in $palette-colors-text {
      @each $level in $palette-levels-text {
        @include text-emphasis.text-emphasis-palette-variant(".text-#{$theme}-#{$level}", $color, $level, settings.$level-delta-hover-color);
      }
    }
  }

  // Special text colors
  @if settings-options.$enable-utility-text-special {
    .text-body { color: settings.$body-color !important; }
    .text-muted { color: settings.$text-muted !important; }
    .text-white { color: settings.$white !important; }
    .text-black { color: settings.$black !important; }
  }

  // Reset text color
  @if settings-options.$enable-utility-text-reset {
    .text-reset { color: inherit !important; }
  }

  // Line heights
  @if settings-options.$enable-utility-text-height {
    @each $size, $dim in settings.$line-heights {
      .lh-#{$size} { line-height: #{$dim} !important; }
    }
  }

  // Font sizes
  @if settings-options.$enable-utility-text-size {
    @each $breakpoint in settings.$utility-text-size-breakpoints {
      $bprule: breakpoints.breakpoint-designator($breakpoint);
      $bpsize: breakpoints.breakpoint-min($breakpoint);

      @include breakpoints.media-breakpoint-up($breakpoint) {
        @each $size, $dim in settings.$font-sizes {
          @if ($bpsize == null or $bpsize < settings.$responsive-font-size-breakpoint) {
            .fs#{$bprule}-#{$size} { @include rfs.font-size($dim !important); }
          } @else {
            //stylelint-disable-next-line property-disallowed-list
            .fs#{$bprule}-#{$size} { font-size: $dim !important; }
          }
        }
      }
    }
  }
}
