// scss-lint:disable ImportantRule, SpaceBeforeBrace

// Alignment
.text-justify { text-align: justify; }
.text-nowrap  { white-space: nowrap; }

// Responsive alignment
@each $breakpoint in map-keys($grid-breakpoints) {
    $bprule: breakpoint-designator($breakpoint);

    @include media-breakpoint-up($breakpoint) {
        .text#{$bprule}-left    { text-align: left !important; }
        .text#{$bprule}-right   { text-align: right !important; }
        .text#{$bprule}-center  { text-align: center !important; }
    }
}

// Transformation
.text-lowercase      { text-transform: lowercase !important; }
.text-uppercase      { text-transform: uppercase !important; }
.text-capitalize     { text-transform: capitalize !important; }

// Weight and italics
.font-weight-normal  { font-weight: $font-weight-normal; }
.font-weight-bold    { font-weight: $font-weight-bold; }
.font-italic         { font-style: italic; }

// Contextual colors
@each $theme, $colors in $context-themes {
    $color: map-get($colors, "context-color");

    @include text-emphasis-variant(".text-#{$theme}", $color);
}

// Palette colors
@if $enable-palette {
    @each $theme, $color in $palette-themes {
        @each $level in $palette-levels {
            $level-color: palette($color, $level);
            @include text-emphasis-variant(".text-#{$theme}-#{$level}", $level-color);
        }
    }
}

// Muted text
@include text-emphasis-variant('.text-muted', $text-muted);

// Hidden text
.text-hide {
    @include text-hide();
}

// Special case colors
// scss-lint:disable QualifyingElement
.text-light {
    color: $text-light-color !important;
}
a.text-light {
    @include hover-focus {
        color: $text-light-hover !important;
    }
}
.text-dark {
    color: $text-dark-color !important;
}
a.text-dark {
    @include hover-focus {
        color: $text-dark-hover !important;
    }
}
// scss-lint:enable QualifyingElement

// Truncated text
.text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
