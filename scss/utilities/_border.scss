// stylelint-disable declaration-no-important

// Perfect circle
.radius-circle {
    border-radius: 50% !important;
}

// Radius - Default
@include radius-sides($radius-border-radius);
@include radius-corners($radius-border-radius);

// Radius - Component sizes
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-border-radius: map-get($dims, "border-radius");

        @include radius-sides($sz-border-radius, $size);
        @include radius-corners($sz-border-radius, $size);
    }
}

// Radius removal
@include radius-sides(0 !important, 0);
@include radius-corners(0 !important, 0);


// Repsonsive border addition and removal
@each $breakpoint in map-keys($grid-breakpoints) {
    $bprule: breakpoint-designator($breakpoint);

    @include media-breakpoint-up($breakpoint) {
        // Border addition
        .border#{$bprule} { border: $border-width solid $border-color !important; }
        .border#{$bprule}-t,
        .border#{$bprule}-y {
            border-top: $border-width solid $border-color !important;
        }
        .border#{$bprule}-e,
        .border#{$bprule}-x {
            border-right: $border-width solid $border-color !important;
        }
        .border#{$bprule}-b,
        .border#{$bprule}-y {
            border-bottom: $border-width solid $border-color !important;
        }
        .border#{$bprule}-s,
        .border#{$bprule}-x {
            border-left: $border-width solid $border-color !important;
        }

        // Border removal
        .border#{$bprule}-0 { border: 0 !important; }
        .border#{$bprule}-t-0,
        .border#{$bprule}-y-0 {
            border-top: 0 !important;
        }
        .border#{$bprule}-e-0,
        .border#{$bprule}-x-0 {
            border-right: 0 !important;
        }
        .border#{$bprule}-b-0,
        .border#{$bprule}-y-0 {
            border-bottom: 0 !important;
        }
        .border#{$bprule}-s-0,
        .border#{$bprule}-x-0 {
            border-left: 0 !important;
        }
    }
}

// Border colors
// Contextual borders
@if (type-of($utility-border-colors) == "map" and length($utility-border-colors) != 0) {
    @each $theme, $color in $utility-border-colors {
        .border-#{$theme} {
            border-color: $color !important;
        }
    }
}

// Palette colors
@if $enable-palette {
    @each $theme, $color in $palette-colors {
        @each $level in $palette-levels {
            .border-#{$theme}-#{$level} {
                border-color: palette($color, $level) !important;
            }
        }
    }
}

// Transparent border
.border-transparent { border-color: transparent !important; }
