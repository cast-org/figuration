@use "sass:list";
@use "sass:meta";
@use "../functions/color-util";
@use "../mixins/border";
@use "../mixins/breakpoints";
@use "../settings";
@use "../settings-colors";
@use "../settings-options";

// stylelint-disable declaration-no-important, property-disallowed-list

@if settings-options.$enable-utility-border {
    // Perfect circle
    @if settings-options.$enable-utility-border-radius-circle {
        .radius-circle {
            border-radius: 50% !important;
        }
    }

    @if settings-options.$enable-utility-border-radius-pill {
        .radius-pill {
            border-radius: settings.$radius-pill !important;
        }
    }

    // Radius addition - Default size
    @if settings-options.$enable-utility-border-radius-addition {
        @include border.radius-sides(settings.$radius-border-radius);
        @include border.radius-corners(settings.$radius-border-radius);
    }

    // Radius addition - Size variants
    @if settings-options.$enable-utility-border-radius-sizing {
        @each $size, $dim in settings.$radii {
            @include border.radius-sides($dim, $size);
            @include border.radius-corners($dim, $size);
        }
    }

    // Radius removal
    @if settings-options.$enable-utility-border-radius-removal {
        @include border.radius-sides(0 !important, 0);
        @include border.radius-corners(0 !important, 0);
    }


    // Responsive border addition and removal
    @each $breakpoint in settings.$utility-border-breakpoints {
        $bprule: breakpoints.breakpoint-designator($breakpoint);

        @include breakpoints.media-breakpoint-up($breakpoint) {
            // Border addition
            @if settings-options.$enable-utility-border-addition {
                .border#{$bprule} { border: settings.$border-width solid settings.$border-color !important; }
                .border#{$bprule}-t,
                .border#{$bprule}-y {
                    border-top: settings.$border-width solid settings.$border-color !important;
                }
                .border#{$bprule}-e,
                .border#{$bprule}-x {
                    border-right: settings.$border-width solid settings.$border-color !important;
                }
                .border#{$bprule}-b,
                .border#{$bprule}-y {
                    border-bottom: settings.$border-width solid settings.$border-color !important;
                }
                .border#{$bprule}-s,
                .border#{$bprule}-x {
                    border-left: settings.$border-width solid settings.$border-color !important;
                }
            }

            // Border removal
            @if settings-options.$enable-utility-border-removal {
                .border#{$bprule}-0 { border: 0 !important; }
                .border#{$bprule}-t-0,
                .border#{$bprule}-y-0 {
                    border-top: 0 !important;
                }
                .border#{$bprule}-e-0,
                .border#{$bprule}-x-0 {
                    border-right: 0 !important;
                }
                .border#{$bprule}-b-0,
                .border#{$bprule}-y-0 {
                    border-bottom: 0 !important;
                }
                .border#{$bprule}-s-0,
                .border#{$bprule}-x-0 {
                    border-left: 0 !important;
                }
            }
        }
    }

    // Border width
    @if settings-options.$enable-utility-border-width {
        @each $size, $dim in settings.$border-widths {
            .border-#{$size} {
                border-width: $dim !important;
            }
        }
    }

    // Contextual borders
    @if settings-options.$enable-utility-border-colors {
        @if (meta.type-of(settings.$utility-border-colors) == "map" and list.length(settings.$utility-border-colors) != 0) {
            @each $theme, $color in settings.$utility-border-colors {
                .border-#{$theme} {
                    border-color: $color !important;
                }
            }
        }
    }

    // Palette colors
    @if settings-options.$enable-palette and settings-options.$enable-utility-border-palette {
        $palette-colors-borders: settings.$palette-colors !default;
        $palette-levels-borders: settings-colors.$palette-levels !default;

        @each $theme, $color in $palette-colors-borders {
            @each $level in $palette-levels-borders {
                .border-#{$theme}-#{$level} {
                    border-color: color-util.palette($color, $level) !important;
                }
            }
        }
    }

    // Special border colors
    @if settings-options.$enable-utility-border-special {
        .border-white { border-color: settings.$white !important; }
        .border-black { border-color: settings.$black !important; }
        .border-transparent { border-color: transparent !important; }
        .border-inherit { border-color: inherit !important; }
    }
}
