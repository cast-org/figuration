@use "../settings";
@use "../settings-options";
@use "../mixins/breakpoints";

// stylelint-disable declaration-no-important

@if settings-options.$enable-utility-spacing {
  // Margin and Padding
  @each $breakpoint in settings.$utility-spacing-breakpoints {
    $bprule: breakpoints.breakpoint-designator($breakpoint);

    @include breakpoints.media-breakpoint-up($breakpoint) {
      @each $prop, $abbrev in (margin: m, padding: p) {
        @if ($abbrev == m and settings-options.$enable-utility-spacing-margin) or ($abbrev == p and settings-options.$enable-utility-spacing-padding) {
          $spacers-map: if($abbrev == m, settings.$spacers-margin, settings.$spacers-padding);
          @each $size, $length in $spacers-map {
            .#{$abbrev}#{$bprule}-#{$size} {
              #{$prop}: $length !important;
            }
          }
          @each $size, $length in $spacers-map {
            .#{$abbrev}t#{$bprule}-#{$size},
            .#{$abbrev}y#{$bprule}-#{$size} {
              #{$prop}-top: $length !important;
            }
            .#{$abbrev}e#{$bprule}-#{$size},
            .#{$abbrev}x#{$bprule}-#{$size} {
              #{$prop}-right: $length !important;
            }
            .#{$abbrev}b#{$bprule}-#{$size},
            .#{$abbrev}y#{$bprule}-#{$size} {
              #{$prop}-bottom: $length !important;
            }
            .#{$abbrev}s#{$bprule}-#{$size},
            .#{$abbrev}x#{$bprule}-#{$size} {
              #{$prop}-left: $length !important;
            }
          }
        }
      }

      // Negative (or inverse) margins - negative padding does not exist
      // These variants get a 'n' prepended to the size so
      // `.mb-n1` is the negative variant of `.mb-1`
      @if settings-options.$enable-utility-spacing-margin-negative {
        @each $size, $length in settings.$spacers-margin-negative {
          @if not($length == 0) {
            .m#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size} {
              margin: ($length * -1) !important;
            }
          }
        }
        @each $size, $length in settings.$spacers-margin-negative {
          @if not($length == 0) {
            .mt#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size},
            .my#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size} {
              margin-top: ($length * -1) !important;
            }
            .me#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size},
            .mx#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size} {
              margin-right: ($length * -1) !important;
            }
            .mb#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size},
            .my#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size} {
              margin-bottom: ($length * -1) !important;
            }
            .ms#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size},
            .mx#{$bprule}-#{settings.$spacers-margin-negative-prepend}#{$size} {
              margin-left: ($length * -1) !important;
            }
          }
        }
      }

      // Auto margin
      @if settings-options.$enable-utility-spacing-margin-auto {
        .m#{$bprule}-auto {
          margin: auto !important;
        }
        .mt#{$bprule}-auto,
        .my#{$bprule}-auto {
          margin-top: auto !important;
        }
        .me#{$bprule}-auto,
        .mx#{$bprule}-auto {
          margin-right: auto !important;
        }
        .mb#{$bprule}-auto,
        .my#{$bprule}-auto {
          margin-bottom: auto !important;
        }
        .ms#{$bprule}-auto,
        .mx#{$bprule}-auto {
          margin-left: auto !important;
        }
      }

      @if settings-options.$enable-utility-spacing-gap {
        @each $size, $length in settings.$spacers-gap {
          .gap#{$bprule}-#{$size} {
            gap: $length !important;
          }
        }
      }
    }
  }
}
