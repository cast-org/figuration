@use "../settings";
@use "../settings-options";
@use "../functions/calc-util";
@use "../mixins/border";
@use "../mixins/box-shadow";
@use "../mixins/transition";

@if settings-options.$enable-form {

  // Checkboxes and radios
  //
  // Indent the labels to position radios/checkboxes as hanging controls.
  @if settings-options.$enable-form-check {
    .form-check {
      display: block;
      min-height: calc(#{settings.$line-height-base} * 1em); // stylelint-disable-line function-disallowed-list
      padding-left: settings.$form-check-gutter;
      margin-bottom: settings.$form-check-margin-bottom;

      > input {
        margin-left: settings.$form-check-gutter * -1;

        // stylelint-disable selector-no-qualifying-type
        &[disabled],
        &:disabled {
          ~ .form-check-label {
            opacity: settings.$form-check-label-disabled-opacity;
          }
          // Get custom input to roughly match the parent label's opacity
          // Fixes issue with not going semi-transparent in disabled fieldsets
          ~ .form-check-label::before,
          ~ .form-check-label::after {
            opacity: .999;
          }
        }
        // stylelint-enable selector-no-qualifying-type
      }
    }

    @if settings-options.$enable-form-check-reverse {
      .form-check-reverse {
        &.form-check {
          padding-right: settings.$form-check-gutter;
          padding-left: 0;
          text-align: right;

          > input {
            float: right;
            margin-top: calc((1em * #{settings.$line-height-base} - #{settings.$input-checkradio-size}) * .5); // stylelint-disable-line function-disallowed-list
            margin-right: settings.$form-check-gutter * -1;
            margin-left: 0;
          }
        }
      }
    }

    .form-check-label {
      display: inline;
      margin-bottom: 0; // Override default `<label>` bottom margin
      font-weight: settings.$form-check-label-font-weight;
      color: settings.$form-check-label-color;
      cursor: settings.$form-check-label-cursor;
    }
  }

  %form-check-input-hide {
    position: absolute;
    z-index: -1;
    pointer-events: none;
    opacity: 0;
  }


  @if settings-options.$enable-form-check and settings-options.$enable-form-check-checkradio {
    .form-checkradio {
      padding-left: settings.$form-checkradio-gutter;

      .form-check-input {
        width: settings.$form-checkradio-size;
        height: settings.$form-checkradio-size;
        margin-top: calc(((1em * #{settings.$line-height-base}) - #{settings.$form-checkradio-size}) * .5); // stylelint-disable-line function-disallowed-list
        margin-left: settings.$form-checkradio-gutter * -1;
        @extend %form-check-input-hide;
      }

      .form-check-label {
        &::before {
          display: inline-block;
          float: left;
          width: settings.$form-checkradio-size;
          height: settings.$form-checkradio-size;
          margin-top: calc(((1em * #{settings.$line-height-base}) - #{settings.$form-checkradio-size}) * .5); // stylelint-disable-line function-disallowed-list
          margin-left: settings.$form-checkradio-gutter * -1;
          content: "";
          background-color: settings.$form-checkradio-bg;
          background-repeat: no-repeat;
          background-position: center;
          background-size: settings.$form-checkradio-icon-size;
          border: settings.$form-checkradio-border-width solid settings.$form-checkradio-border-color;
          @include box-shadow.box-shadow(settings.$form-checkradio-box-shadow);
          @include transition.transition(settings.$input-transition);
          print-color-adjust: exact;
        }
      }

      .form-check-input[type="checkbox"] ~ .form-check-label {
        &::before {
          @include border.border-radius(settings.$form-checkradio-checkbox-border-radius);
        }
      }

      .form-check-input[type="radio"] ~ .form-check-label {
        &::before {
          // stylelint-disable-next-line property-disallowed-list
          border-radius: settings.$form-checkradio-radio-border-radius;
        }
      }

      .form-check-input:active:not([disabled]):not(:disabled) ~ .form-check-label {
        &::before {
          filter: brightness(92.5%);
        }
      }

      .form-check-input:focus ~ .form-check-label {
        &::before {
          border-color: settings.$form-checkradio-focus-border-color;
          outline: 0;
          @if settings.$enable-shadows {
            @include box-shadow.box-shadow(settings.$form-checkradio-box-shadow, settings.$form-checkradio-focus-box-shadow);
          } @else {
            box-shadow: settings.$form-checkradio-focus-box-shadow;
          }
        }
      }

      .form-check-input:checked ~ .form-check-label {
        &::before {
          background-color: settings.$form-checkradio-checked-bg;
          border-color: settings.$form-checkradio-checked-border-color;
          @include box-shadow.box-shadow(settings.$form-checkradio-checked-box-shadow);
        }
      }

      .form-check-input:checked:focus ~ .form-check-label {
        &::before {
          @include box-shadow.box-shadow(settings.$form-checkradio-checked-box-shadow, settings.$form-checkradio-focus-box-shadow);
        }
      }

      .form-check-input[type="checkbox"]:checked ~ .form-check-label {
        &::before {
          background-image: settings.$form-checkradio-checkbox-icon;
        }
      }

      .form-check-input[type="radio"]:checked ~ .form-check-label {
        &::before {
          background-image: settings.$form-checkradio-radio-icon;
        }
      }

      .form-check-input[type="checkbox"]:indeterminate ~ .form-check-label {
        &::before {
          background-color: settings.$form-checkradio-indeterminate-bg;
          background-image: settings.$form-checkradio-indeterminate-icon;
          border-color: settings.$form-checkradio-indeterminate-border-color;
        }
      }
    }

    @if settings-options.$enable-form-check-reverse {
      .form-check-reverse {
        &.form-checkradio {
          padding-right: settings.$form-checkradio-gutter;
          padding-left: 0;

          .form-check-input {
            margin-right: settings.$form-checkradio-gutter * -1;
            margin-left: 0;
          }

          .form-check-label {
            &::before {
              float: right;
              margin-right: settings.$form-checkradio-gutter * -1;
              margin-left: 0;
            }
          }
        }
      }
    }
  }

  // Switch
  @if settings-options.$enable-form-check and settings-options.$enable-form-check-switch {
    .form-switch {
      position: relative;
      padding-left: settings.$form-switch-gutter;

      .form-check-input {
        @extend %form-check-input-hide;
        top: calc((1em * #{settings.$line-height-base} - #{settings.$form-switch-track-height}) * .5); // stylelint-disable-line function-disallowed-list
        left: 0;
        width: settings.$form-switch-width;
        height: settings.$form-switch-track-height;
        margin-left: 0;
      }

      .form-check-label {
        &::before,
        &::after {
          position: absolute;
          display: inline-block;
          content: "";
          @include transition.transition(settings.$switch-transition);
          print-color-adjust: exact;
        }

        // Track
        &::before {
          top: calc((1em * #{settings.$line-height-base} - #{settings.$form-switch-track-height}) * .5); // stylelint-disable-line function-disallowed-list
          left: 0;
          width: settings.$form-switch-width;
          height: settings.$form-switch-track-height;
          background-color: settings.$form-switch-track-bg;
          border: settings.$form-switch-track-border-width solid settings.$form-switch-track-border-color;
          @include border.border-radius(settings.$form-switch-track-border-radius);
          @include box-shadow.box-shadow(settings.$form-switch-track-box-shadow);
        }

        // Thumb
        &::after {
          top: calc((1em * #{settings.$line-height-base} - #{settings.$form-switch-thumb-height}) * .5); // stylelint-disable-line function-disallowed-list
          left: settings.$form-switch-thumb-offset;
          width: settings.$form-switch-thumb-width;
          height: settings.$form-switch-thumb-height;
          background-color: settings.$form-switch-thumb-bg;
          border: settings.$form-switch-thumb-border-width solid settings.$form-switch-thumb-border-color;
          @include border.border-radius(settings.$form-switch-thumb-border-radius);
          @include box-shadow.box-shadow(settings.$form-switch-thumb-box-shadow);
        }
      }

      .form-check-input:active:not([disabled]):not(:disabled) ~ .form-check-label {
        &::before,
        &::after {
          filter: brightness(92.5%);
        }
      }

      .form-check-input:focus ~ .form-check-label {
        &::before {
          background-color: settings.$form-switch-track-focus-bg;
          border-color: settings.$form-switch-track-focus-border-color;
          outline: 0;
          @if settings.$enable-shadows {
            @include box-shadow.box-shadow(settings.$form-switch-track-box-shadow, settings.$form-switch-track-focus-box-shadow);
          } @else {
            box-shadow: settings.$form-switch-track-focus-box-shadow;
          }
        }
        &::after {
          background-color: settings.$form-switch-thumb-focus-bg;
          border-color: settings.$form-switch-thumb-focus-border-color;
          outline: 0;
          @if settings.$enable-shadows {
            @include box-shadow.box-shadow(settings.$form-switch-thumb-box-shadow, settings.$form-switch-thumb-focus-box-shadow);
          } @else {
            box-shadow: settings.$form-switch-thumb-focus-box-shadow;
          }
        }
      }

      .form-check-input:checked ~ .form-check-label {
        &::before {
          background-color: settings.$form-switch-track-checked-bg;
          border-color: settings.$form-switch-track-checked-border-color;
          @include box-shadow.box-shadow(settings.$form-switch-track-checked-box-shadow);
        }
        &::after {
          left: calc-util.subtract(settings.$form-switch-width, calc-util.add(settings.$form-switch-thumb-width, settings.$form-switch-thumb-offset, false));
          background-color: settings.$form-switch-thumb-checked-bg;
          border-color: settings.$form-switch-thumb-checked-border-color;
          @include box-shadow.box-shadow(settings.$form-switch-thumb-checked-box-shadow);
        }
      }

      .form-check-input:checked:focus ~ .form-check-label {
        &::before {
          @include box-shadow.box-shadow(settings.$form-switch-track-checked-box-shadow, settings.$form-switch-track-focus-box-shadow);
        }
        &::after {
          @include box-shadow.box-shadow(settings.$form-switch-thumb-checked-box-shadow, settings.$form-switch-thumb-focus-box-shadow);
        }
      }
    }

    @if settings-options.$enable-form-check-reverse {
      .form-check-reverse {
        &.form-switch {
          padding-right: settings.$form-switch-gutter;
          padding-left: 0;

          .form-check-input {
            right: 0;
            left: auto;
          }

          .form-check-label {
            // Track
            &::before {
              right: 0;
              left: auto;
            }

            // Thumb
            &::after {
              right: calc-util.subtract(settings.$form-switch-width, calc-util.add(settings.$form-switch-thumb-width, settings.$form-switch-thumb-offset, false));
              left: auto;
            }
          }

          .form-check-input:checked ~ .form-check-label {
            &::after {
              right: settings.$form-switch-thumb-offset;
              left: auto;
            }
          }
        }
      }
    }
  }
}
