// Map deep get
// @author Hugo Giraudel
// From: https://css-tricks.com/snippets/sass/deep-getset-maps/
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
// Example: $color: map-deep-get($context-themes, "primary", "control-bg");
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// Sorts a map ascending by values
// @author https://github.com/iamandrewluca
// From: https://gist.github.com/Jakobud/a0ac11e80a1de453cd86f0d3fc0a1410#gistcomment-2327765
// Used for grid-breakpoints and container-max-widths sorting
//
// @param {Map} $map - Initial map
// @return {Map} - Sorted map
@function map-sort-by-values($map) {
    // Transform map to zipped list
    $keys: ();
    $values: ();

    @each $key, $val in $map {
        $keys: append($keys, $key);
        $values: append($values, $val);
    }

    $list: zip($keys, $values);

    // Sort zipped list and create sorted map
    $sortedMap: ();
    @while length($list) > 0 {

        // Find smallest pair
        $smallestPair: nth($list, 1);
        @each $pair in $list {
            $value: nth($pair, 2);
            $smallestValue: nth($smallestPair, 2);
            @if $value < $smallestValue {
                $smallestPair: $pair;
            }
        }

        // Add smallest pair to sorted map
        $key: nth($smallestPair, 1);
        $value: nth($smallestPair, 2);
        $sortedMap: map-merge($sortedMap, ($key: $value));

        // Remove from list smallest pair
        $newList: ();
        $smallestPairIndex: index($list, $smallestPair);
        @for $i from 1 through length($list) {
            @if $i != $smallestPairIndex {
                $newList: append($newList, nth($list, $i), "space");
            }
        }
        $list: $newList;
    }

    @return $sortedMap;
}
