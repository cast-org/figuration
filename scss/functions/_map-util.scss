@use "sass:list";
@use "sass:map";

// Map deep get
// @author Kitty Giraudel
// From: https://css-tricks.com/snippets/sass/deep-getset-maps/
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
// Example: $color: map-deep-get($context-themes, "primary", "control-bg");
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

// Sorts a map ascending by values
// @author https://github.com/iamandrewluca
// From: https://gist.github.com/Jakobud/a0ac11e80a1de453cd86f0d3fc0a1410#gistcomment-2327765
// Used for grid-breakpoints and container-max-widths sorting
//
// @param {Map} $map - Initial map
// @return {Map} - Sorted map
@function map-sort-by-values($map) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: list.append($keys, $key);
    $values: list.append($values, $val);
  }

  $list: list.zip($keys, $values);

  // Sort zipped list and create sorted map
  $sorted-map: ();
  @while list.length($list) > 0 {

    // Find smallest pair
    $smallest-pair: list.nth($list, 1);
    @each $pair in $list {
      $value: list.nth($pair, 2);
      $smallest-value: list.nth($smallest-pair, 2);
      @if $value < $smallest-value {
        $smallest-pair: $pair;
      }
    }

    // Add smallest pair to sorted map
    $key: list.nth($smallest-pair, 1);
    $value: list.nth($smallest-pair, 2);
    $sorted-map: map.merge($sorted-map, ($key: $value));

    // Remove from list smallest pair
    $new-list: ();
    $smallest-pair-index: list.index($list, $smallest-pair);
    @for $i from 1 through list.length($list) {
      @if $i != $smallest-pair-index {
        $new-list: list.append($new-list, list.nth($list, $i), "space");
      }
    }
    $list: $new-list;
  }

  @return $sorted-map;
}

// Merge multiple maps together into a single map
//
// @param {Arglist} $maps - list of maps
// @return {Map} - Merged map
@function map-merge-multiple($maps...) {
  $merged-map: ();

  @each $map in $maps {
    $merged-map: map.merge($merged-map, $map);
  }

  @return $merged-map;
}
