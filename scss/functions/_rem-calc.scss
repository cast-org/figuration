// scss-lint:disable ZeroUnit

// Remove the unit of a length
// From: https://css-tricks.com/snippets/sass/strip-unit-function/
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}


// Converts one or more pixel values into matching rem values.
// Borrowed from: https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Figuration out of the box, this is 16px. If this parameter is `null`, the function will reference the `$font-size-root` variable as the base.
// @returns {List} A list of converted values.
@function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: $font-size-root;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most browsers
    @if unit($base) == "%" {
        $base: ($base / 100%) * 16px;
    }

    @if $count == 1 {
        @return _px-to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, _px-to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}


// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value.
// By default, the base pixel value used to calculate the rem value is taken from the `$font-size-root` variable.
// Borrowed from: https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
// @access private
// @param {Number} $value - Pixel value to convert.
// @param {Number} $base [null] - Base for pixel conversion.
// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function _px-to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != "number" {
        @warn inspect($value) + " was passed to rem-calc(), which is not a number.";
        @return $value;
    }

    // Calculate rem if units for $value is not rem
    @if unit($value) != "rem" {
        $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}


// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
// Borrowed from: https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
@function bp-to-em($value) {
    // Pixel and unitless values are converted to rem
    @if unit($value) == "px" or unitless($value) {
        $value: rem-calc($value, $base: 16px);
    }

    // Convert to em
    @return strip-unit($value) * 1em;
}
