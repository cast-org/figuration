@use "sass:meta";
@use "sass:string";
@use "../settings-encode";

// Replace `$search` with `$replace` in `$string`
// @author Kitty Giraudel
// From https://css-tricks.com/snippets/sass/str-replace-function/
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ("") - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: string.index($string, $search);

    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
    }

    @return $string;
}

// Encode SVG data URLs into CSS friendly versions, otherwise
// pass through the original string.
// Requires the use of quotes around data URIs.
// From https://codepen.io/kevinweber/pen/dXWoRw
@function encode-svg($string) {
    @if string.index($string, "data:image/svg+xml") {
        @each $char, $encoded in settings-encode.$encode-svg-chars{
            // Do not escape the url brackets
            @if string.index($string, "url(") == 1 {
                $string: url("#{str-replace(string.slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: str-replace($string, $char, $encoded);
            }
        }
    }

    @return $string;
}

// Strip the `calc` surrounding a string if one is found, leaves the '()'s
// in place to preserve operator precedence.
@function strip-calc($string) {
    @if meta.type-of($string) == "string" {
        @if string.index($string, "calc(") == 1 {
            $string: string.slice($string, 5, -1);
        }
    }

    @return $string;
}
