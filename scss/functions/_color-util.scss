@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$color-warnings: false !default;
$base: 500 !default;
$light-interval: .2% !default;
$dark-interval: .2% !default;
$contrast-min-ratio:  4.5 !default;
$contrast-base-light: #fff !default;
$contrast-base-dark:  #000 !default;

// Generate palette colors

// Valid levels 0-1000
@function palette($color, $level) {
  $level-delta: $level - $base;

  @if $level < 0 {
    @return #fff;
  } @else if $level > 1000 {
    @return #000;
  } @else if $level < $base {
    // lighten - flip negative value
    $light-pct: if($level-delta * $light-interval > 100, 100, $level-delta * $light-interval);
    @return color.mix(#fff, $color, $light-pct * -1);
  } @else if $level > $base {
    // darken
    $dark-pct: if($level-delta * $dark-interval > 100, 100, $level-delta * $dark-interval);
    @return color.mix(#000, $color, $dark-pct);
  }

  // level==500
  @return $color;
}

// Conversions
@function to-rgb($value) {
  @return color.red($value), color.green($value), color.blue($value);
}

@function rgba-css-var($identifier, $target) {
  @if $identifier == "body" and $target == "bg" {
    @return rgba(var(--#{$prefix}#{$identifier}-bg-rgb), var(--#{$prefix}#{$target}-opacity));
  } @if $identifier == "body" and $target == "text" {
    @return rgba(var(--#{$prefix}#{$identifier}-color-rgb), var(--#{$prefix}#{$target}-opacity));
  } @else {
    @return rgba(var(--#{$prefix}#{$identifier}-rgb), var(--#{$prefix}#{$target}-opacity));
  }
}


// Generate contextual color theme
@function mix-context-colors($colors, $levels) {
  $result:            ();

  $level-bg:            map.get($levels, "bg");
  $level-color:         map.get($levels, "color");
  $level-border:        map.get($levels, "border-color");
  $level-hover-bg:      map.get($levels, "hover-bg");
  $level-hover-color:   map.get($levels, "hover-color");
  $level-hover-border:  map.get($levels, "hover-border-color");
  $level-active-bg:     map.get($levels, "active-bg");
  $level-active-color:  map.get($levels, "active-color");
  $level-active-border: map.get($levels, "active-border-color");

  @each $theme, $base in $colors {
    // Color adjustments
    $cutil-bg:            palette($base, $level-bg);
    $cutil-color:         palette($base, $level-color);
    $cutil-color:         color-if-contrast($cutil-color, $cutil-bg);
    $cutil-border:        palette($base, $level-border);

    $cutil-hover-bg:      palette($base, $level-hover-bg);
    $cutil-hover-color:   palette($base, $level-hover-color);
    $cutil-hover-color:   color-if-contrast($cutil-hover-color, $cutil-hover-bg);
    $cutil-hover-border:  palette($base, $level-hover-border);

    $cutil-active-bg:     palette($base, $level-active-bg);
    $cutil-active-color:  palette($cutil-hover-color, $level-active-color);
    $cutil-active-color:  color-if-contrast($cutil-active-color, $cutil-active-bg);
    $cutil-active-border: palette($base, $level-active-border);

    // Build new map
    $new-map: (
      "base": $base,
      "bg": $cutil-bg,
      "color": $cutil-color,
      "border-color": $cutil-border,
      "hover-bg": $cutil-hover-bg,
      "hover-color": $cutil-hover-color,
      "hover-border-color": $cutil-hover-border,
      "active-bg": $cutil-active-bg,
      "active-color": $cutil-active-color,
      "active-border-color": $cutil-active-border
    );

    // Merge into theme map
    $result: map.merge($result, ($theme: $new-map));
  }

  @return $result;
}

// =====

// Get color with hopefully minimum contrast ratio against a given one
// based on the minimum contrast ratio setting.
@function color-contrast($color, $light: $contrast-base-light, $dark: $contrast-base-dark) {
  @if (color-get-contrast-ratio($light, $color) <= $contrast-min-ratio) {
    @return $dark;
  }
  @return $light;
}

// Get color with maximum contrast against the given one.
@function color-max-contrast($color) {
  $ratiowhite: color-get-contrast-ratio(#fff, $color);
  $ratioblack: color-get-contrast-ratio(#000, $color);
  @if ($ratioblack > $ratiowhite) {
    @return #000;
  }
  @return #fff;
}

// Check to see if standard contrast function meets the minimum contrast
// ratio, otherwise get the max contrast.
@function color-auto-contrast($color, $light: $contrast-base-light, $dark: $contrast-base-dark) {
  @if meta.type-of($color) != color {
    @return $color;
  }
  $colorauto: color-contrast($color, $light, $dark);
  @if (color-get-contrast-ratio($colorauto, $color) >= $contrast-min-ratio) {
    @return $colorauto;
  }

  @if $color-warnings {
    @warn "Auto-selected color (#{$colorauto}) does not meet the defined minimum contrast ratio (#{$contrast-min-ratio}:1) against the color (#{$color})! Now using a color with maximum contrast.";
  }
  @return color-max-contrast($color);
}

// Check to see if a color meets minimum contrast ratio and use it,
// otherwise get the best color contrast possible.
@function color-if-contrast($colorfore, $colorback, $light: $contrast-base-light, $dark: $contrast-base-dark) {
  @if meta.type-of($colorfore) != color or meta.type-of($colorback) != color {
    @return $colorfore;
  }
  @if (color-get-contrast-ratio($colorfore, $colorback) >= $contrast-min-ratio) {
    @return $colorfore;
  }
  @if $color-warnings {
    @warn "Foreground color (#{$colorfore}) does not meet the defined minimum contrast ratio (#{$contrast-min-ratio}:1) against the background color (#{$colorback})! Now auto-selecting a color that should meet minimum contrast.";
  }
  @return color-auto-contrast($colorback, $light, $dark);
}

// =====

// Calculate color contrasts and luminance using the WCAG 2.2 spec.
// Formulas from:
// https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
// https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// https://github.com/w3c/wcag/pull/1780

// Color luminance
@function color-get-luminance($color) {
  // Calculate channel color values in sRGB space
  $r: math.div(color.red($color), 255);
  $g: math.div(color.green($color), 255);
  $b: math.div(color.blue($color), 255);

  // stylelint-disable number-max-precision
  $red:   if($r < .04045, math.div($r, 12.92), math.pow(math.div(($r + .055), 1.055), 2.4));
  $green: if($g < .04045, math.div($g, 12.92), math.pow(math.div(($g + .055), 1.055), 2.4));
  $blue:  if($b < .04045, math.div($b, 12.92), math.pow(math.div(($b + .055), 1.055), 2.4));
  // stylelint-enable number-max-precision

  @return (.2126 * $red) + (.7152 * $green) + (.0722 * $blue);
}

// Color contrast ratio
@function color-get-contrast-ratio($colorfore, $colorback) {
  $lumfore: color-get-luminance(color-get-opaque($colorfore, $colorback)) + .05;
  $lumback: color-get-luminance($colorback) + .05;

  @return math.div(math.max($lumfore, $lumback), math.min($lumfore, $lumback));
}

// Opaque color
// color-get-opaque(rgba(0, 0, 0, .5), #fff) => #808080
@function color-get-opaque($colorfore, $colorback) {
  @return color.mix(rgba($colorfore, 1), $colorback, color.opacity($colorfore) * 100%);
}
