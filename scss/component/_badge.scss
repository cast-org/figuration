// Base class
.badge {
    display: inline-block;
    padding: $badge-padding-y $badge-padding-x;
    @include font-size($badge-font-size);
    font-weight: $badge-font-weight;
    line-height: $badge-line-height;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
    vertical-align: baseline;
    border: $badge-border-width solid transparent;
    @include border-radius($badge-border-radius);

    // Empty badges collapse automatically
    &:empty {
        display: none;
    }

    // Add hover effects, but only for links
    &[href] {
        @include hover-focus {
            text-decoration: none;

            .close {
                color: inherit;
            }
        }
    }

    .close {
        padding-right: $badge-close-padding-x;
        padding-left: $badge-close-padding-x;
        margin-right: -$badge-close-padding-x;
        font-size: $badge-close-font-size;
        color: inherit;
        text-shadow: none;

        &:not(:disabled):not(.disabled) {
            @include hover-focus {
                color: inherit;
            }
        }
    }

    // Default color (linked badges get darker on :hover)
    @include badge-variant($badge-default-color, $badge-default-bg, $badge-default-border, $badge-default-hover-color, $badge-default-hover-bg, $badge-default-hover-border);
}

// Quick fix for badges in buttons
.btn .badge {
    position: relative;
    top: -1px;
}

// Pill
.badge-pill {
    padding-right: $badge-pill-padding-x;
    padding-left: $badge-pill-padding-x;
    @include border-radius($badge-pill-border-radius);
}

// Badge group
.badge-group {
    display: inline-flex;
    vertical-align: baseline;

    > .badge {
        &:not(:first-child) {
            margin-left: -$badge-border-width;
            @include border-start-radius(0);
        }

        &:not(:last-child) {
            @include border-end-radius(0);
        }
    }
}

// Theme generation
@if (type-of($badge-colors) == "map" and length($badge-colors) != 0) {
    $mixed-badge-themes: _mix-context-colors($badge-colors, $badge-levels);
    $badge-themes: map-merge($mixed-badge-themes, $badge-themes);
}

@if (type-of($badge-outline-colors) == "map" and length($badge-outline-colors) != 0) {
    $mixed-badge-outline-themes: _mix-context-colors($badge-outline-colors, $badge-outline-levels);
    $badge-outline-themes: map-merge($mixed-badge-outline-themes, $badge-outline-themes);
}

// Colors (linked badges get darker on :hover)
@if (type-of($badge-themes) == "map" and length($badge-themes) != 0) {
    @each $theme, $colors in $badge-themes {
        $bg:            map-get($colors, "bg");
        $color:         map-get($colors, "color");
        $hover-bg:      map-get($colors, "hover-bg");
        $hover-color:   map-get($colors, "hover-color");

        .badge-#{$theme} {
            @include badge-variant($color, $bg, $bg, $hover-color, $hover-bg, $hover-bg);
        }
    }
}

// Outline (linked badges get color fill on :hover)
.badge-outline {
    @include badge-variant($badge-default-color, $badge-outline-bg, $badge-default-border, $badge-default-hover-color, $badge-default-hover-bg, $badge-default-hover-border);
}
@if (type-of($badge-outline-themes) == "map" and length($badge-outline-themes) != 0) {
    @each $theme, $colors in $badge-outline-themes {
        $bg:            $badge-outline-bg;
        $color:         map-get($colors, "base");
        $hover-bg:      map-get($colors, "bg");
        $hover-color:   map-get($colors, "hover-color");

        .badge-outline-#{$theme} {
            @include badge-variant($color, $bg, $hover-bg, $hover-color, $hover-bg, $hover-bg);
        }
    }
}
