@if $enable-popover {
    .popover {
        position: absolute;
        z-index: $zindex-popover;
        display: none;
        max-width: $popover-max-width;
        margin: $popover-margin;
        // Our parent element can be arbitrary since popovers are by default inserted as a sibling of their target element.
        // So reset our font and text properties to avoid inheriting weird values.
        @include reset-text();
        @include font-size($popover-font-size);
        // Allow breaking very long words so they don't overflow the popover's bounds
        word-wrap: break-word;
        background-color: $popover-bg;
        background-clip: padding-box;
        border: $popover-border-width solid $popover-border-color;
        @include border-radius($popover-border-radius);
        @include box-shadow($popover-box-shadow);
        outline: 0;

        // Showing
        &.in {
            opacity: 1;
        }
    }

    // Arrows
    // .popover-arrow is outer, .popover-arrow::after is inner
    @if $enable-popover-arrow {
        .popover-arrow {
            position: absolute;
            display: block;
            width: $popover-arrow-width;
            height: $popover-arrow-height;
            margin: 0 $popover-border-radius;

            &::before,
            &::after {
                position: absolute;
                display: block;
                content: "";
                border-color: transparent;
                border-style: solid;
            }
        }

        // Offset the popover to account for the popover arrow

        /* rtl:begin:ignore */
        .cfw-popover-top {
            margin-bottom: add($popover-arrow-height, $popover-margin);

            > .popover-arrow {
                bottom: subtract(-$popover-arrow-height, $popover-border-width);

                &::before {
                    bottom: 0;
                    border-width: $popover-arrow-height ($popover-arrow-width * .5) 0;
                    border-top-color: $popover-arrow-outer-color;
                }

                &::after {
                    bottom: $popover-border-width;
                    border-width: $popover-arrow-height ($popover-arrow-width * .5) 0;
                    border-top-color: $popover-arrow-color;
                }
            }
        }

        .cfw-popover-right {
            margin-left: add($popover-arrow-height, $popover-margin);

            > .popover-arrow {
                left: subtract(-$popover-arrow-height, $popover-border-width);
                width: $popover-arrow-height;
                height: $popover-arrow-width;
                margin: $popover-border-radius 0; // make sure the arrow does not touch the popover's rounded corners

                &::before {
                    left: 0;
                    border-width: ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5) 0;
                    border-right-color: $popover-arrow-outer-color;
                }

                &::after {
                    left: $popover-border-width;
                    border-width: ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5) 0;
                    border-right-color: $popover-arrow-color;
                }
            }
        }

        .cfw-popover-bottom {
            margin-top: add($popover-arrow-height, $popover-margin);

            > .popover-arrow {
                top: subtract(-$popover-arrow-height, $popover-border-width);

                &::before {
                    top: 0;
                    border-width: 0 ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5);
                    border-bottom-color: $popover-arrow-outer-color;
                }

                &::after {
                    top: $popover-border-width;
                    border-width: 0 ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5);
                    border-bottom-color: $popover-arrow-color;
                }
            }
        }

        .cfw-popover-left {
            margin-right: add($popover-arrow-height, $popover-margin);

            > .popover-arrow {
                right: subtract(-$popover-arrow-height, $popover-border-width);
                width: $popover-arrow-height;
                height: $popover-arrow-width;
                margin: $popover-border-radius 0; // make sure the arrow does not touch the popover's rounded corners

                &::before {
                    right: 0;
                    border-width: ($popover-arrow-width * .5) 0 ($popover-arrow-width * .5) $popover-arrow-height;
                    border-left-color: $popover-arrow-outer-color;
                }

                &::after {
                    right: $popover-border-width;
                    border-width: ($popover-arrow-width * .5) 0 ($popover-arrow-width * .5) $popover-arrow-height;
                    border-left-color: $popover-arrow-color;
                }
            }
        }

        .cfw-popover-auto {
            &[x-placement^="top"] {
                @extend .cfw-popover-top;
            }
            &[x-placement^="right"] {
                @extend .cfw-popover-right;
            }
            &[x-placement^="bottom"] {
                @extend .cfw-popover-bottom;
            }
            &[x-placement^="left"] {
                @extend .cfw-popover-left;
            }
        }

        /* rtl:end:ignore */
    }

    @if $enable-popover-header {
        .popover-header {
            padding: $popover-header-padding-y $popover-header-padding-x;
            padding-right: ($popover-header-padding-x * 2);
            margin: 0; // reset heading margin
            @include font-size($popover-header-font-size);
            font-weight: $popover-header-font-weight;
            color: $popover-header-color;
            background-color: $popover-header-bg;
            border-bottom: $popover-header-border-width solid $popover-header-border-color;
            @include border-radius($popover-inner-border-radius $popover-inner-border-radius 0 0);

            &:empty {
                display: none;
            }
        }
    }

    @if $enable-popover-body {
        .popover-body {
            padding: $popover-body-padding-y $popover-body-padding-x;
            color: $popover-body-color;
        }

        @if $enable-popover-close {
            .close + .popover-body {
                padding-right: add($close-font-size, $popover-control-padding-x);
            }
        }
        @if $enable-popover-drag {
            .drag + .popover-body {
                padding-right: add($close-font-size, $popover-control-padding-x);
            }
        }
        @if $enable-popover-close and $enable-popover-drag {
            .close ~ .drag + .popover-body {
                padding-right: add($close-font-size * 2, $popover-control-padding-x * 2);
            }
        }

    }

    // Control buttons
    %popover-control {
        float: right;
        padding: $popover-control-padding-y $popover-control-padding-x;
    }
    @if $enable-popover-close {
        .popover .close {
            @extend %popover-control;
        }
    }
    @if $enable-popover-drag {
        .popover .drag {
            @extend %popover-control;
        }
    }

    // Draggable variant
    @if $enable-popover-draggable {
        .popover.draggable {
            margin: 0;

            .popover-arrow {
                display: none;
            }
        }
    }
}
