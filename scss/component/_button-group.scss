// scss-lint:disable QualifyingElement

// Make the div behave like a button
.btn-group,
.btn-group-vertical {
    position: relative;
    vertical-align: middle; // match .btn alignment given font-size hack above

    @if $enable-flex-full {
        display: inline-flex;
    } @else {
        display: inline-block;
    }

    > .btn {
        position: relative;
        margin-bottom: 0;

        @if not $enable-flex-full {
            float: left;
        }

        // Bring the "active" button to the front
        &:focus,
        &:active,
        &.active {
            z-index: 2;
        }

        @include hover {
            z-index: 2;
        }
    }
}

@if $enable-flex-opt {
    .btn-group-flex,
    .btn-group-vertical-flex {
        display: inline-flex;

        > .btn {
            float: initial;
        }
    }
}

// Prevent double borders when buttons are next to each other
.btn-group {
    .btn + .btn,
    .btn + .btn-group,
    .btn-group + .btn,
    .btn-group + .btn-group {
        margin-left: -$input-border-width;
    }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
    margin-left: -$btn-toolbar-margin; // Offset the first child's margin
    @include clearfix();

    .btn-group,
    .input-group {
        float: left;
    }

    > .btn,
    > .btn-group,
    > .input-group {
        margin-left: $btn-toolbar-margin;
    }
}

.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
    border-radius: 0;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
.btn-group > .btn:first-child {
    margin-left: 0;

    &:not(:last-child):not(.dropdown-toggle) {
        @include border-right-radius(0);
    }
}
// Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btn-group > .btn:last-child:not(:first-child),
.btn-group > .dropdown-toggle:not(:first-child) {
    @include border-left-radius(0);
}

// Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
.btn-group > .btn-group {
    float: left;
}
.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {
    border-radius: 0;
}
.btn-group > .btn-group:first-child:not(:last-child) {
    > .btn:last-child,
    > .dropdown-toggle {
        @include border-right-radius(0);
    }
}
.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {
    @include border-left-radius(0);
}

// On active and open, don't show outline
.btn-group .dropdown-toggle:active,
.btn-group.open .dropdown-toggle {
    outline: 0;
}


// Sizing
// Remix the button sizing classes into new ones for easier manipulation
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        .btn-group-#{$size} > .btn { @extend .btn-#{$size}; }
    }
}

// Split button dropdowns
.btn + .dropdown-toggle-split {
    padding-right: $btn-padding-x * .75;
    padding-left: $btn-padding-x * .75;
}
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-padding-x: map-get($dims, "padding-x");

        .btn-#{$size} > .dropdown-toggle-split {
            padding-right: $sz-padding-x * .75;
            padding-left: $sz-padding-x * .75;
        }
    }
}

// The clickable button for toggling the menu
// Remove the gradient and set the same inset shadow as the :active state
.btn-group.open .dropdown-toggle {
    @include box-shadow($btn-active-box-shadow);

    // Show no shadow for `.btn-link` since it has no other button styles.
    &.btn-link {
        @include box-shadow(none);
    }
}


// Reposition the caret
.btn .caret {
    margin-left: 0;
}

// Vertical button groups
.btn-group-vertical {
    @if $enable-flex-full {
        flex-direction: column;
    }

    > .btn,
    > .btn-group,
    > .btn-group > .btn {
        width: 100%;
        max-width: 100%;

        @if not $enable-flex-full {
            display: block;
            float: none;
        }
    }

    // Clear floats so dropdown menus can be properly placed
    > .btn-group {
        @include clearfix();

        > .btn {
            float: none;
        }
    }

    > .btn + .btn,
    > .btn + .btn-group,
    > .btn-group + .btn,
    > .btn-group + .btn-group {
        margin-top: -$input-border-width;
        margin-left: 0;
    }
}

@if $enable-flex-opt {
    .btn-group-vertical-flex {
        flex-direction: column;

        > .btn,
        > .btn-group,
        > .btn-group > .btn {
            display: initial;
            float: initial;
        }
    }
}

.btn-group-vertical > .btn {
    &:not(:first-child):not(:last-child) {
        border-radius: 0;
    }
    &:first-child:not(:last-child) {
        @include border-bottom-radius(0);
    }
    &:last-child:not(:first-child) {
        @include border-top-radius(0);
    }
}
.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {
    border-radius: 0;
}
.btn-group-vertical > .btn-group:first-child:not(:last-child) {
    > .btn:last-child,
    > .dropdown-toggle {
        @include border-bottom-radius(0);
    }
}
.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {
    @include border-top-radius(0);
}


// Checkbox and radio options
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

[data-cfw="buttons"] {
    > .btn,
    > .btn-group > .btn {
        input[type="radio"],
        input[type="checkbox"] {
            position: absolute;
            clip: rect(0,0,0,0);
            pointer-events: none;
        }
    }
}
