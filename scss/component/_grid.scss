// Container widths
// Set the container width, and override it for fixed navbars in media queries.
@if $enable-grid-classes {
    .container {
        @include make-container();
        @include make-container-max-widths();
    }
}

// Fluid container
// Utilizes the mixin meant for fixed width containers, but with
// 100% width for fluid, full width layouts.
@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

// Responsive containers
// Containers that are 100% wide until a breakpoint
@if $enable-grid-classes and $enable-grid-responsive-containers {
    @each $breakpoint in $responsive-container-breakpoints {
        $rc-max-width: map-get($container-max-widths, $breakpoint);

        @if $rc-max-width != null {
            .container-#{$breakpoint} {
                @extend .container-fluid;
            }

            @include media-breakpoint-up($breakpoint) {
                %responsive-container-#{$breakpoint} {
                    max-width: $rc-max-width;
                }

                // Extend each breakpoint which should be smaller or
                // equal to the current breakpoint
                $extend-breakpoint: true;

                @each $name, $width in $grid-breakpoints {
                    //@if (rem($rc-max-width) > rem($width) or $breakpoint == $name) {
                    @if ($extend-breakpoint) {
                        $bprule: breakpoint-designator($name);
                        .container#{$bprule} {
                            @extend %responsive-container-#{$breakpoint};
                        }
                    }

                    // Once the current breakpoint is reached, stop extending
                    @if ($breakpoint == $name) {
                        $extend-breakpoint: false;
                    }
                }
            }
        }
    }
}

// Row
// Rows contain columns.
@if $enable-grid-classes {
    .row {
        @include make-row();
    }

    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
        margin-right: 0;
        margin-left: 0;

        > .col,
        > [class*="col-"] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

// Columns
// Common styles for grid columns
@if $enable-grid-classes {
    @include make-grid-columns();
}

// Responsive Row Columns
@if $enable-grid-classes  and $enable-grid-row-cols {
    @include make-row-columns();
}
