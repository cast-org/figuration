@use "../settings" as *;
@use "../settings-options" as *;
@use "../mixins" as *;
@use "../vendor/rfs" as *;

@if $enable-offcanvas {

  @each $bp in $offcanvas-breakpoints {
    $next: breakpoint-next($bp, $grid-breakpoints);
    $bprule: breakpoint-designator($next);

    @include media-breakpoint-down($bp) {
      // stylelint-disable scss/percent-placeholder-pattern
      %offcanvas#{$bp} {
        position: fixed;
        bottom: 0;
        z-index: $zindex-offcanvas;
        display: flex;
        flex-direction: column;
        max-width: 100%;
        color: $offcanvas-color;
        // Our parent element can be arbitrary since offcanvas can be inserted into specified containers.
        // So reset our font and text properties to avoid inheriting weird values.
        @include reset-text();
        @include font-size($offcanvas-font-size);
        // Allow breaking very long words so they don't overflow the offcanvas bounds
        word-wrap: break-word;
        visibility: hidden;
        background-color: $offcanvas-bg;
        background-clip: padding-box;
        outline: 0;
        @include box-shadow($offcanvas-box-shadow);

        @if $enable-offcanvas-side-start {
          &.offcanvas-start {
            top: 0;
            left: 0;
            width: $offcanvas-horizontal-width;
            border-right: $offcanvas-border-width solid $offcanvas-border-color;
            transform: translateX(-100%);
          }
        }

        @if $enable-offcanvas-side-end {
          &.offcanvas-end {
            top: 0;
            right: 0;
            width: $offcanvas-horizontal-width;
            border-left: $offcanvas-border-width solid $offcanvas-border-color;
            transform: translateX(100%);
          }
        }

        @if $enable-offcanvas-side-top {
          &.offcanvas-top {
            top: 0;
            right: 0;
            left: 0;
            height: $offcanvas-vertical-height;
            max-height: 100%;
            border-bottom: $offcanvas-border-width solid $offcanvas-border-color;
            transform: translateY(-100%);
          }
        }

        @if $enable-offcanvas-side-bottom {
          &.offcanvas-bottom {
            right: 0;
            left: 0;
            height: $offcanvas-vertical-height;
            max-height: 100%;
            border-top: $offcanvas-border-width solid $offcanvas-border-color;
            transform: translateY(100%);
          }
        }

        &.showing,
        &.in:not(.hiding) {
          transform: none;
        }

        &.showing,
        &.in.hiding {
          @include transition($offcanvas-transition);
        }

        &.showing,
        &.hiding,
        &.in {
          visibility: visible;
        }

        // Offcanvas rootElement specified
        .offcanvas-open:not(body) & {
          position: absolute;
        }
      }
      // stylelint-enable scss/percent-placeholder-pattern

      // Skip largest breakpoint
      @if breakpoint-max($bp, $grid-breakpoints) != null {
        @if $enable-offcanvas-responsive {
          .offcanvas#{$bprule} {
            @extend %offcanvas#{$bp};
          }
        }
      } @else {
        .offcanvas {
          @extend %offcanvas#{$bp};
        }
      }
    }

    @if not ($next == null) {
      @if $enable-offcanvas-responsive {
        @include media-breakpoint-up($next) {
          .offcanvas#{$bprule} {
            height: auto;
            background-color: transparent !important; // stylelint-disable-line declaration-no-important
            border-width: 0;

            .offcanvas-header {
              display: none;
            }

            .offcanvas-body {
              display: flex;
              flex-grow: 0;
              padding: 0;
              overflow-y: visible;
              // Reset `background-color` in case `.bg-*` classes are used in offcanvas
              background-color: transparent !important; // stylelint-disable-line declaration-no-important
            }
          }
        }
      }
    }
  }

  .offcanvas-backdrop {
    @include backdrop-overlay($zindex-offcanvas-backdrop, $offcanvas-backdrop-bg, $offcanvas-backdrop-opacity);

    // Offcanvas rootElement specified
    .offcanvas-open:not(body) & {
      position: absolute;
      width: 100%;
      height: 100%;
    }
  }


  @if $enable-offcanvas-header {
    .offcanvas-header {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      padding: $offcanvas-header-padding-y $offcanvas-header-padding-x;
      color: $offcanvas-header-color;
      background-color: $offcanvas-header-bg;
      border-bottom: $offcanvas-header-border-width solid $offcanvas-header-border-color;

      // Close icon
      .close {
        // Make sure close appears 'after' the title
        order: 1;
        padding: $offcanvas-close-padding-y $offcanvas-close-padding-x;
        // Left auto margin keeps close pushed to the right side even when no title
        margin: (-$offcanvas-header-padding-y) (-$offcanvas-header-padding-x) (-$offcanvas-header-padding-y) auto;
      }
    }
  }

  @if $enable-offcanvas-title {
    .offcanvas-title {
      margin: 0;
      line-height: $offcanvas-title-line-height;
    }
  }

  @if $enable-offcanvas-body {
    .offcanvas-body {
      flex-grow: 1;
      padding: $offcanvas-body-padding-y $offcanvas-body-padding-x;
      overflow-y: auto;
    }
  }

  @if $enable-offcanvas-footer {
    .offcanvas-footer {
      display: flex;
      align-items: center;
      justify-content: flex-end; // right align buttons
      padding: $offcanvas-footer-padding-y $offcanvas-footer-padding-x;
      color: $offcanvas-footer-color;
      background-color: $offcanvas-footer-bg;
      border-top: $offcanvas-footer-border-width solid $offcanvas-footer-border-color;

      // Simulate spaces between footer elements with margins
      > :not(:first-child) { margin-left: .25rem; }
      > :not(:last-child) { margin-right: .25rem; }
    }
  }

  // Close is blocked animation
  .offcanvas.offcanvas-blocked.in {
    @include transition($offcanvas-blocked-transition);
    transform: $offcanvas-blocked-transform;
  }
}
