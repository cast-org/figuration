@if $enable-input-group {
    // Base styles
    .input-group {
        position: relative;
        display: flex;
        flex-wrap: wrap; // For form validation feedback
        align-items: stretch;
        width: 100%;

        > .form-control,
        > .form-file {
            position: relative;  // Needed for z-index on focus/active state
            flex: 1 1 0%;
            min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
            margin-bottom: 0;

            // Add width 1% and flex-basis auto to ensure proper sizing in IE
            // when inline or auto-sizing column.
            @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                & {
                    flex-basis: auto;
                    width: 1%;
                }
            }
        }

        // Bring the "active" form control to the top of surrounding elements
        > .form-control:focus {
            z-index: 3;
        }

        // Custom file inputs have more complex markup,
        // needing special overrides.
        @if $enable-form-file {
            > .form-file {
                // Bring input back above label for drag and drop to work if
                // the custom file input is focused.
                .form-file-input:focus {
                    z-index: 4;

                    ~ .form-file-label {
                        z-index: 3;
                    }
                }
                .form-file-input:focus-within {
                    z-index: 4;

                    ~ .form-file-label {
                        z-index: 3;
                    }
                }

                display: flex;
                align-items: center;

                &:not(:last-child) .form-file-label { @include border-end-radius(0); }
                &:not(:first-child) .form-file-label { @include border-start-radius(0); }
            }
        }

        // Ensure buttons are always above inputs for more visually pleasing borders.
        // This isn't needed for `.input-group-text` since it shares the same border-color
        // as our inputs.
        @if $enable-btn {
            .btn {
                position: relative;
                z-index: 2;

                &:hover,
                &:focus {
                    z-index: 3;
                }
            }
            @if $enable-btn-check {
                .btn-check-input:focus ~ .btn {
                    z-index: 3;
                }
            }
        }
    }

    // Textual addon item
    // Catch-all element for any text or radio/checkbox input you wish
    // to addon to an input.
    @if $enable-input-group-text {
        .input-group-text {
            display: flex;
            align-items: center;
            padding: $input-group-text-padding-y $input-group-text-padding-x;
            margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
            @include font-size($input-font-size); // Match inputs
            font-weight: $input-group-text-font-weight;
            line-height: $input-line-height;
            color: $input-group-text-color;
            text-align: center;
            white-space: nowrap;
            background-color: $input-group-text-bg;
            border: $input-border-width solid $input-group-text-border-color;
            @include border-radius($input-border-radius);
        }
    }

    // Sizing options
    // Remix the default form control sizing classes into new ones for easier manipulation.
    @if $enable-sizing  and $enable-input-group-sizing {
        @each $size, $dims in $input-sizes {
            $sz-padding-x:     map-get($dims, "padding-x");

            .input-group-#{$size} > .form-control,
            .input-group-#{$size} > .input-group-text {
                @extend %form-control-#{$size};
            }

            @if $enable-form-file {
                .input-group-#{$size} > .form-file {
                    @extend %form-file-#{$size} !optional;
                }
            }

            @if $enable-btn {
                .input-group-#{$size} > .btn {
                    @extend %btn-#{$size};
                }

                @if $enable-btn-check {
                    .input-group-#{$size} > .btn-check > .btn {
                        @extend %btn-#{$size};
                    }
                }
                @if $enable-btn-icon {
                    .input-group-#{$size} > .btn-icon {
                        @extend %btn-icon-#{$size} !optional;
                    }
                }
            }
        }
    }


    // Reset rounded corners
    // These rulesets must come after the sizing ones to properly override sizing
    // border-radius values when extending. They're more specific than we'd like
    // with the `.input-group >` part, but without it, we cannot override the sizing.
    // stylelint-disable-next-line no-duplicate-selectors
    .input-group {
        > :not(:last-child):not(.dropdown-menu):not(.input-group-end):not([data-cfw="dropdown"]),
        > .btn-check:not(:last-child):not(.input-group-end) > .btn,
        > [data-cfw="dropdown"]:nth-last-child(n + 3) {
            @include border-end-radius(0);
        }

        > :not(:first-child):not(.dropdown-menu),
        > .btn-check:not(:first-child) > .btn {
            margin-left: -$input-border-width;
            @include border-start-radius(0);
        }
        > .btn-check:not(:first-child) > .btn {
            margin-left: 0;
        }
    }
}

