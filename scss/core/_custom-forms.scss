// scss-lint:disable PropertyCount

// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// http://useiconic.com/open


// Checkboxes and Radios
// Base class takes care of all the key behavioral aspects.
.custom-control {
    position: relative;
    display: inline-block;
    min-height: (1rem * $line-height-base);
    padding-left: $custom-control-gutter;
    margin-right: $custom-control-spacer-x;
    margin-bottom: 0;
    cursor: pointer;
}

.custom-control-input {
    position: absolute;
    z-index: -1; // Put the input behind the label so it doesn't overlay text
    opacity: 0;

    &:checked ~ .custom-control-indicator {
        color: $custom-control-checked-indicator-color;
        background-color: $custom-control-checked-indicator-bg;
        @include box-shadow($custom-control-checked-indicator-box-shadow);
    }

    &:focus ~ .custom-control-indicator {
        // the mixin is not used here to make sure there is feedback
        box-shadow: $custom-control-focus-indicator-box-shadow;
    }

    &:active ~ .custom-control-indicator {
        color: $custom-control-active-indicator-color;
        background-color: $custom-control-active-indicator-bg;
        @include box-shadow($custom-control-active-indicator-box-shadow);
    }

    &:disabled {
        ~ .custom-control-indicator {
            cursor: $custom-control-disabled-cursor;
            background-color: $custom-control-disabled-indicator-bg;
            border: 0;
        }

        ~ .custom-control-description {
            color: $custom-control-disabled-description-color;
            cursor: $custom-control-disabled-cursor;
        }
    }
}

// Custom indicator
// Generates a shadow element to create our makeshift checkbox/radio background.
.custom-control-indicator {
    position: absolute;
    top: (($line-height-base - $custom-control-indicator-size) / 2);
    left: 0;
    display: block;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    pointer-events: none;
    user-select: none;
    background-color: $custom-control-indicator-bg;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: $custom-control-indicator-bg-size;
    border: $custom-control-indicator-border-width solid $custom-control-indicator-border-color;
    @include box-shadow($custom-control-indicator-box-shadow);
}

// Checkboxes
// Tweak just a few things for checkboxes.
.custom-checkbox {
    .custom-control-indicator {
        @include border-radius($custom-checkbox-radius);
    }

    .custom-control-input:checked ~ .custom-control-indicator {
        background-image: $custom-checkbox-checked-icon;
        border: 0;
    }

    .custom-control-input:indeterminate ~ .custom-control-indicator {
        background-color: $custom-checkbox-indeterminate-bg;
        background-image: $custom-checkbox-indeterminate-icon;
        @include box-shadow($custom-checkbox-indeterminate-box-shadow);
    }
}

// Radios
// Tweak just a few things for radios.
.custom-radio {
    .custom-control-indicator {
        border-radius: $custom-radio-radius;
    }

    .custom-control-input:checked ~ .custom-control-indicator {
        background-image: $custom-radio-checked-icon;
        border: 0;
    }
}


// Layout options
// By default radios and checkboxes are `inline-block` with no additional spacing
// set. Use these optional classes to tweak the layout.
.custom-controls-stacked {
    .custom-control {
        display: block;
        margin-bottom: $custom-control-spacer-y;

        + .custom-control {
            margin-left: 0;
        }
    }
}


// Select
// Replaces the browser default select with a custom one.
// Includes IE9-specific hacks (noted by ` \9`).
.custom-select {
    display: block;
    width: 100%;
    height: $select-height;
    padding: $input-padding-y (($input-padding-x / 2) + $custom-select-indicator-padding) $input-padding-y ($input-padding-x / 2);
    padding-right: ($input-padding-x / 2) \9;
    color: $custom-select-color;
    vertical-align: middle;
    background: $custom-select-bg $custom-select-indicator no-repeat right ($input-padding-x / 2) center;
    background-image: none \9;
    background-size: $custom-select-bg-size;
    border: $custom-select-border-width solid $custom-select-border-color;
    @include border-radius($custom-select-border-radius);
    appearance: none;

    &:focus {
        border-color: $custom-select-focus-border-color;
        outline: none;
        @include box-shadow($custom-select-focus-box-shadow);

        &::-ms-value {
            // For visual consistency with other platforms/browsers,
            // supress the default white text on blue background highlight given to
            // the selected option text when the (still closed) <select> receives focus
            // in IE and (under certain conditions) Edge.
            // See https://github.com/twbs/bootstrap/issues/19398.
            color: $input-color;
            background-color: $input-bg;
        }
    }

    &:disabled {
        color: $custom-select-disabled-color;
        cursor: $cursor-disabled;
        background-color: $custom-select-disabled-bg;
    }

    // Hides the default caret in IE11
    &::-ms-expand {
        opacity: 0;
    }
}

// Select sizes
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-font-size:     map-get($dims, "font-size");
        $sz-padding-y:     map-get($dims, "padding-y") - ($input-line-height-delta * $sz-font-size / 2);
        $sz-padding-x:     map-get($dims, "padding-x");
        $sz-input-height:  (($sz-font-size * $input-line-height) + ($sz-padding-y * 2));
        $sz-select-height: calc(#{$sz-input-height} + #{($border-width * 2)});

        //scss-lint:disable DuplicateProperty
        .custom-select-#{$size} {
            height: $sz-select-height;
            padding: $sz-padding-y ($sz-padding-x / 2);
            padding-right: ($sz-padding-x + $custom-select-indicator-padding);
            padding-right: ($sz-padding-x / 2) \9;
            font-size: $sz-font-size;
            background-position: right ($sz-padding-x / 2) center;
        }
        //scss-lint:enable DuplicateProperty
    }
}

// File
// Custom file input.
.custom-file {
    position: relative;
    display: inline-block;
    max-width: 100%;
    height: $select-height;
    cursor: pointer;
}

.custom-file-input {
    min-width: $custom-file-width;
    max-width: 100%;
    margin: 0;
    filter: alpha(opacity = 0);
    opacity: 0;

    &:focus ~ .custom-file-control {
        @include box-shadow($custom-file-focus-box-shadow);
    }
}

.custom-file-control {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    z-index: 5;
    height: $select-height;
    padding: $input-padding-y ($input-padding-x / 2);
    line-height: $input-line-height;
    color: $custom-file-color;
    user-select: none;
    background-color: $custom-file-bg;
    border: $custom-file-border-width solid $custom-file-border-color;
    @include border-radius($custom-file-border-radius);
    @include box-shadow($custom-file-box-shadow);

    @each $lang, $text in map-get($custom-file-text, placeholder) {
        &:lang(#{$lang})::after {
            content: $text;
        }
    }

    &::before {
        position: absolute;
        top: -$custom-file-border-width;
        right: -$custom-file-border-width;
        bottom: -$custom-file-border-width;
        z-index: 6;
        display: block;
        height: $select-height;
        padding: $input-padding-y $input-padding-x;
        line-height: $input-line-height;
        color: $custom-file-button-color;
        background-color: $custom-file-button-bg;
        border: $custom-file-border-width solid $custom-file-border-color;
        @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);
    }

    @each $lang, $text in map-get($custom-file-text, button-label) {
        &:lang(#{$lang})::before {
            content: $text;
        }
    }
}

//Color
// Custom color input
.custom-color {
    display: block;
    width: auto;
    min-width: $input-height;
    height: $input-height;
    font-size: $font-size-base;
    line-height: $input-line-height;
    color: $input-color;
    cursor: pointer;
    background-color: $input-bg;
    background-image: none;
    background-clip: padding-box;
    border: $input-border-width solid $input-border-color;
    @include border-radius($input-border-radius);
    @include box-shadow($input-box-shadow);
    @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);
}
