// stylelint-disable selector-no-qualifying-type

// Base button
.btn {
    display: inline-block;
    font-weight: $btn-font-weight;
    line-height: $btn-line-height;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: $btn-border-width solid transparent;
    @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, $btn-border-radius);
    @include box-shadow($btn-box-shadow);
    @include transition($btn-transition);

    &:hover,
    &:focus,
    .btn-check-input:focus ~ & {
        text-decoration: none;
        @include box-shadow($btn-box-shadow);
    }

    // Disabled comes first so active can restyle
    &.disabled,
    &:disabled,
    .btn-check-input:disabled ~ & {
        cursor: $cursor-disabled;
        opacity: $btn-disabled-opacity;
        @include box-shadow(none);
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .btn-check-input:not(:disabled):checked ~ &,
    .open > & {
        // Remove the gradient for the pressed/active state
        background-image: none;
        @include box-shadow($btn-active-box-shadow);
    }

    &:not(:disabled):not(.disabled):active:hover,
    &:not(:disabled):not(.disabled).active:hover,
    &:not(:disabled):not(.disabled):active:focus,
    &:not(:disabled):not(.disabled).active:focus,
    .btn-check-input:not(:disabled):checked:focus ~ &,
    .btn-check-input:not(:disabled):checked ~ &:hover,
    .open > &:hover,
    .open > &:focus {
        @include box-shadow($btn-active-box-shadow);
    }

    // Default color
    @include button-variant($btn-default-color, $btn-default-bg, $btn-default-border-color, $btn-default-hover-color, $btn-default-hover-bg, $btn-default-hover-border-color, $btn-default-active-hover-color, $btn-default-active-hover-bg);
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn,
.btn-check-input:disabled ~ .btn {
    pointer-events: none;
}

// Contextual color variants
@each $theme, $colors in $context-themes {
    .btn-#{$theme} {
        @include button-variant-control($theme, $colors);
    }
}

// Outline variant - remove all backgrounds
.btn-outline {
    @include button-variant($btn-default-color, $btn-outline-bg, $btn-default-border-color, $btn-default-hover-color, $btn-default-hover-bg, $btn-default-hover-border-color, $btn-default-active-hover-color, $btn-default-active-hover-bg);
}
@each $theme, $colors in $context-themes {
    .btn-outline-#{$theme} {
        @include button-variant-control-outline($theme, $colors, $btn-outline-bg);
    }
}

// Link buttons
// Make a button look and behave like a link
.btn-link {
    text-decoration: $link-decoration;
    @include button-variant($link-color, transparent, transparent, $link-hover-color, transparent, transparent, $link-hover-color, transparent);
    @include box-shadow(none);

    @include hover-focus {
        color: $link-hover-color;
        text-decoration: $link-hover-decoration;
        @include box-shadow(none);
    }

    &.disabled,
    &:disabled {
        text-decoration: none;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .open > & {
        color: $link-hover-color;
        @include box-shadow(none);
    }
}

// Button sizes
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-font-size:     map-get($dims, "font-size");
        $sz-padding-y:     map-get($dims, "padding-y");
        $sz-padding-x:     map-get($dims, "padding-x");
        $sz-border-radius: map-get($dims, "border-radius");

        .btn-#{$size} {
            @include button-size($sz-padding-y, $sz-padding-x, $sz-font-size, $sz-border-radius);
        }
    }
}

// Block button
.btn-block {
    display: block;
    width: 100%;

    // Vertically space out multiple block buttons
    + .btn-block {
        margin-top: $btn-block-spacing-y;
    }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
    &.btn-block {
        width: 100%;
    }
}

// Checkbox and radio button
.btn-check {
    position: relative;
    display: inline-block;
    vertical-align: middle;
}

// Place input behind the label
.btn-check-input {
    position: absolute;
    clip: rect(0, 0, 0, 0);
    pointer-events: none;

    // Override label margin
    ~ .btn {
        margin-bottom: 0;
    }

    // Force outline on for inputs
    // stylelint-disable declaration-block-no-duplicate-properties
    &:focus ~ .btn {
        outline: 1px dotted;
        outline: 5px auto -webkit-focus-ring-color;
    }
    // stylelint-enable declaration-block-no-duplicate-properties
}
