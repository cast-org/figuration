// scss-lint:disable QualifyingElement

// Base button
.btn {
    display: inline-block;
    font-weight: $btn-font-weight;
    line-height: $btn-line-height;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: $input-border-width solid transparent;
    @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, $btn-border-radius);
    // @include transition(all .2s ease-in-out);

    &,
    &:active,
    &.active {
        &:focus,
        &.focus {
            @include keyboard-focus();
        }
    }

    @include hover-focus {
        text-decoration: none;
    }
    &.focus {
        text-decoration: none;
    }

    &:active,
    &.active {
        background-image: none;
        outline: 0;
        @include box-shadow($btn-active-box-shadow);
    }

    &.disabled,
    &:disabled {
        cursor: $cursor-disabled;
        opacity: .6;
        @include box-shadow(none);
    }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset[disabled] a.btn {
    pointer-events: none;
}


// Base colors
.btn {
    @include button-variant($btn-default-color, $btn-default-bg, $btn-default-border);
}
@each $theme, $colors in $context-themes {
    $color:     map-get($colors, "control-color");
    $bg:        map-get($colors, "control-bg");
    $border:    map-get($colors, "control-border");

    .btn-#{$theme} {
        @include button-variant($color, $bg, $border);
    }
}


// Outline variant - remove all backgrounds
//.btn-outline {
//    @include button-outline-variant($btn-default-outline-color, $btn-default-border, true);
//}
@each $theme, $colors in $context-themes {
    $color:     map-get($colors, "control-bg");
    $border:    map-get($colors, "control-border");

    .btn-outline-#{$theme} {
        @include button-outline-variant($color, $border);
    }
}


// Link buttons
// Make a button look and behave like a link
.btn-link {
    @include button-variant($link-color, transparent, transparent);

    @include hover-focus {
        color: $link-hover-color;
        text-decoration: $link-hover-decoration;
    }

    &:active,
    &.active,
    .open > &.dropdown-toggle {
        color: $link-hover-color;

        &:hover,
        &:focus,
        &.focus {
            color: darken($link-hover-color, 25%);
        }
    }

    &:disabled {
        @include hover-focus {
            color: $link-color;
            text-decoration: none;
            background-color: transparent;
            border-color: transparent;
        }
    }
}

// Button sizes
@each $size, $dims in $component-sizes {
    $font-size:     map-get($dims, "font-size");
    $padding-y:     map-get($dims, "padding-y");
    $padding-x:     map-get($dims, "padding-x");
    $border-radius: map-get($dims, "border-radius");

    .btn-#{$size} {
        @include button-size($padding-y, $padding-x, $font-size, $border-radius);
    }
}

// Block button
.btn-block {
    display: block;
    width: 100%;
}

// Vertically space out multiple block buttons
.btn-block + .btn-block {
    margin-top: $btn-block-spacing-y;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
    &.btn-block {
        width: 100%;
    }
}
