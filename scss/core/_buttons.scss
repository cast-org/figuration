@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "../functions/color-util";
@use "../mixins/box-shadow";
@use "../mixins/buttons";
@use "../mixins/hover";
@use "../mixins/transition";
@use "../settings";
@use "../settings-options";

@if settings-options.$enable-btn {
    // Base button
    .btn {
        display: inline-block;
        font-family: settings.$btn-font-family;
        font-weight: settings.$btn-font-weight;
        text-align: center;
        text-decoration: if(settings.$link-decoration == none, null, none);
        white-space: settings.$btn-white-space;
        vertical-align: middle;
        cursor: pointer;
        user-select: none;
        background-color: transparent;
        border: settings.$btn-border-width solid transparent;
        @include buttons.button-size(settings.$btn-padding-y, settings.$btn-padding-x, settings.$btn-font-size, settings.$btn-line-height, settings.$btn-border-radius);
        @include box-shadow.box-shadow(settings.$btn-box-shadow);
        @include transition.transition(settings.$btn-transition);
    }

    .btn:hover {
        text-decoration: if(settings.$link-hover-decoration == underline, none, null);
    }

    %btn-common-focus {
        // Turn off outline due to focus box-shadow set by button-variant()
        outline: 0;
    }
    .btn:focus {
        @extend %btn-common-focus;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input:focus ~ .btn {
            @extend %btn-common-focus;
        }
    }

    // Disabled comes first so active can restyle
    %btn-common-disabled {
        pointer-events: none;
        opacity: settings.$btn-disabled-opacity;
        @include box-shadow.box-shadow(none);
    }
    .btn.disabled,
    .btn:disabled {
        @extend %btn-common-disabled;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input {
            &[disabled],
            &:disabled {
                ~ .btn {
                    @extend %btn-common-disabled;
                }
            }
        }
    }

    %btn-common-active {
        @include box-shadow.box-shadow(settings.$btn-active-box-shadow);
    }
    .btn:active,
    .btn.active,
    .btn.open[data-cfw="dropdown"] {
        @extend %btn-common-active !optional;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input:not([disabled]):not(:disabled):checked ~ .btn {
            @extend %btn-common-active !optional;
        }
    }

    %btn-common-active-focus {
        @include box-shadow.box-shadow(settings.$btn-active-box-shadow, settings.$btn-focus-box-shadow);
    }
    .btn:active:focus,
    .btn.active:focus,
    .btn.open[data-cfw="dropdown"]:focus {
        @extend %btn-common-active-focus !optional;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input:not([disabled]):not(:disabled):checked:focus ~ .btn {
            @extend %btn-common-active-focus !optional;
        }
    }

    // Future-proof disabling of clicks on `<a>` elements
    %btn-common-disabled-pointer {
        pointer-events: none;
    }
    // stylelint-disable-next-line selector-no-qualifying-type
    fieldset:disabled a.btn {
        @extend %btn-common-disabled-pointer;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input {
            &[disabled],
            &:disabled {
                ~ .btn {
                    @extend %btn-common-disabled-pointer;
                }
            }
        }
    }

    // Default color
    @if settings-options.$enable-btn-default {
        @include buttons.button-variant(".btn", settings.$btn-default-color, settings.$btn-default-bg, settings.$btn-default-border-color, settings.$btn-default-focus-box-shadow-color, settings.$btn-default-hover-color, settings.$btn-default-hover-bg, settings.$btn-default-hover-border-color, settings.$btn-default-active-color, settings.$btn-default-active-bg, settings.$btn-default-active-border-color, settings.$btn-default-disabled-color, settings.$btn-default-disabled-bg, settings.$btn-default-disabled-border-color);
    }

    // Theme generation
    @if settings-options.$enable-btn-colors {
        @if (meta.type-of(settings.$btn-colors) == "map" and list.length(settings.$btn-colors) != 0) {
            $mixed-btn-themes: color-util.mix-context-colors(settings.$btn-colors, settings.$btn-levels);
            settings.$btn-themes: map.merge($mixed-btn-themes, settings.$btn-themes);
        }

        // Contextual color variants
        @if (meta.type-of(settings.$btn-themes) == "map" and list.length(settings.$btn-themes) != 0) {
            @each $theme, $colors in settings.$btn-themes {
                @include buttons.button-variant-control(".btn-#{$theme}", $colors);
            }
        }
    }

    // Outline variant - remove all backgrounds
    @if settings-options.$enable-btn-outline {
        @include buttons.button-variant(".btn-outline", settings.$btn-default-color, settings.$btn-outline-bg, settings.$btn-default-border-color, settings.$btn-default-focus-box-shadow-color, settings.$btn-default-hover-color, settings.$btn-default-hover-bg, settings.$btn-default-hover-border-color, settings.$btn-default-active-color, settings.$btn-default-active-bg, settings.$btn-default-active-border-color, settings.$btn-default-disabled-color, settings.$btn-outline-bg, settings.$btn-default-disabled-border-color);
    }

    // Outline theme generation
    @if settings-options.$enable-btn-outline-colors {
        @if (meta.type-of(settings.$btn-outline-colors) == "map" and list.length(settings.$btn-outline-colors) != 0) {
            $mixed-btn-outline-themes: color-util.mix-context-colors(settings.$btn-outline-colors, settings.$btn-outline-levels);
            settings.$btn-outline-themes: map.merge($mixed-btn-outline-themes, settings.$btn-outline-themes);
        }

        // Outline contextual color variants
        @if (meta.type-of(settings.$btn-outline-themes) == "map" and list.length(settings.$btn-outline-themes) != 0) {
            @each $theme, $colors in settings.$btn-outline-themes {
                @include buttons.button-variant-control-outline(".btn-outline-#{$theme}", $colors, settings.$btn-outline-bg);
            }
        }
    }

    // Link buttons
    // Make a button look and behave like a link
    @if settings-options.$enable-btn-link {
        .btn-link {
            color: settings.$btn-link-color;
            text-decoration: settings.$link-decoration;
            background-color: transparent;
            border-color: transparent;
            box-shadow: none;

            @include hover.hover-focus() {
                text-decoration: settings.$link-hover-decoration;
                background-color: transparent;
                border-color: transparent;
            }

            &:hover {
                color: settings.$btn-link-hover-color;
            }

            &.disabled,
            &:disabled {
                color: settings.$btn-link-disabled-color;
                text-decoration: none;
                background-color: transparent;
                border-color: transparent;
            }

            &:active,
            &.active,
            &.open[data-cfw="dropdown"] {
                color: settings.$btn-link-hover-color;
                background-color: transparent;
                border-color: transparent;
                box-shadow: none;
            }
        }
    }

    // Icon button uses smaller horizontal padding
    @if settings-options.$enable-btn-icon {
        .btn-icon {
            padding-right: settings.$btn-padding-x * settings.$btn-icon-multiplier;
            padding-left: settings.$btn-padding-x * settings.$btn-icon-multiplier;
        }
    }

    // Button sizes
    @if settings-options.$enable-sizing {
        @each $size, $dims in settings.$btn-sizes {
            $sz-font-size:     map.get($dims, "font-size");
            $sz-line-height:   map.get($dims, "line-height");
            $sz-padding-y:     map.get($dims, "padding-y");
            $sz-padding-x:     map.get($dims, "padding-x");
            $sz-border-radius: map.get($dims, "border-radius");

            %btn-#{$size} {
                @include buttons.button-size($sz-padding-y, $sz-padding-x, $sz-font-size,  $sz-line-height, $sz-border-radius);
            }

            %btn-icon-#{$size} {
                @if $sz-padding-x != null {
                    padding-right: $sz-padding-x * settings.$btn-icon-multiplier;
                    padding-left: $sz-padding-x * settings.$btn-icon-multiplier;
                }
            }

            .btn-#{$size} {
                @if settings-options.$enable-btn-sizing {
                    @extend %btn-#{$size};
                }

                &.btn-icon {
                    @if settings-options.$enable-btn-icon and settings-options.$enable-btn-icon-sizing {
                        @extend %btn-icon-#{$size} !optional;
                    }
                }
            }
        }
    }

    // Block button
    @if settings-options.$enable-btn-block {
        .btn-block {
            display: block;
            width: 100%;

            // Vertically space out multiple block buttons
            + .btn-block {
                margin-top: settings.$btn-block-spacing-y;
            }
        }
    }

    // Checkbox and radio button
    @if settings-options.$enable-btn-check {
        .btn-check {
            position: relative;
            display: inline-flex;
            vertical-align: middle;
        }

        // Place input behind the label
        .btn-check-input {
            position: absolute;
            clip: rect(0, 0, 0, 0);
            pointer-events: none;

            // Override label margin
            ~ .btn {
                margin-bottom: 0;
            }
        }
    }
}
