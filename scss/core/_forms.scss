// stylelint-disable selector-no-qualifying-type

// Base input/select height calculation
// Additional ones for each size are done during size processing generation
$input-height-inner:    ($input-font-size * $input-line-height) + ($input-padding-y * 2) !default;
$input-height-outer:    calc(#{$input-height-inner} + #{($input-border-width * 2)}) !default;

@if $enable-form {
    // Textual form controls
    @if $enable-form-control {
        .form-control {
            display: block;
            width: 100%;
            // Make inputs the height of their button counterpart (line-height + padding + border)
            height: $input-height-outer;
            padding: $input-padding-y $input-padding-x;
            font-family: $input-font-family;
            @include font-size($input-font-size);
            font-weight: $input-font-weight;
            line-height: $input-line-height;
            color: $input-color;
            background-color: $input-bg;
            border: $input-border-width solid $input-border-color;

            // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
            // Provide a fallback to override to the iOS default
            @include border-radius($input-border-radius, 0);

            @include box-shadow($input-box-shadow);
            @include transition($input-transition);

            // Unstyle the caret on `<select>`s in IE10+.
            &::-ms-expand {
                background-color: transparent;
                border: 0;
            }

            // Customize the `:focus` state to imitate native WebKit styles.
            @include form-control-focus();

            // Placeholder
            &::placeholder {
                color: $input-placeholder-color;
                // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
                opacity: 1;
            }

            // Disabled and read-only inputs
            //
            // HTML5 says that controls under a fieldset > legend:first-child won't be
            // disabled if the fieldset is disabled. Due to implementation difficulty, we
            // don't honor that edge case; we style them as disabled anyway.
            &:disabled,
            &[readonly] {
                background-color: $input-disabled-bg;
                // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
                opacity: 1;
            }

            &:disabled {
                color: $input-disabled-color;
            }
        }

        select.form-control {
            &[size]:not([size="1"]),
            &[multiple] {
                height: auto;
            }

            &:focus::-ms-value {
                // Suppress the nested default white text on blue background highlight given to
                // the selected option text when the (still closed) <select> receives focus
                // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
                // match the appearance of the native widget.
                // See https://github.com/twbs/bootstrap/issues/19398.
                color: $input-focus-color;
                background-color: $input-focus-bg;
            }
        }

        textarea.form-control {
            &:not([rows="1"]) {
                height: auto;
            }
        }
    }

    // Make color, file, range inputs better match text inputs by forcing them to new lines.
    @if $enable-form-control-special {
        .form-control-color,
        .form-control-file,
        .form-control-range {
            display: block;
            width: 100%;
        }
    }

    // Labels
    // For use with horizontal and inline forms, when you need the label
    // (or legend) text to align with the form controls.
    @if $enable-form-control-label {
        .form-control-label {
            padding-top: calc(#{$input-padding-y} + #{$input-border-width});
            padding-bottom: calc(#{$input-padding-y} + #{$input-border-width});
            margin-bottom: 0; // Override the `<label>/<legend>` default
            @include font-size(inherit); // Override the `<legend>` default
            font-weight: $input-label-font-weight;
            line-height: $input-line-height;
        }
    }

    // Static form control text
    // Apply class to an element to make any string of text align with labels
    // in a horizontal form layout.
    @if $enable-form-control-static {
        .form-control-static {
            // Size it appropriately next to real form controls
            display: block;
            width: 100%;
            padding-top: $input-padding-y;
            padding-bottom: $input-padding-y;
            margin-bottom: 0;
            line-height: $input-line-height;
            border: solid transparent;
            border-width: $input-border-width 0;
        }
    }

    // Form control sizing
    // Build on `.form-control` with modifier classes to decrease or increase the
    // height and font-size of form controls.
    @if $enable-sizing {
        @each $size, $dims in $input-sizes {
            $sz-font-size:     map-get($dims, "font-size");
            $sz-line-height:   map-get($dims, "line-height");
            $sz-padding-y:     map-get($dims, "padding-y");
            $sz-padding-x:     map-get($dims, "padding-x");
            $sz-border-radius: map-get($dims, "border-radius");
            $sz-inner-height:  (($sz-font-size * $sz-line-height) + ($sz-padding-y * 2));
            $sz-outer-height:  calc(#{$sz-inner-height} + #{($input-border-width * 2)});

            %form-control-#{$size} {
                height: $sz-outer-height;
                padding: $sz-padding-y $sz-padding-x;
                @include font-size($sz-font-size);
                line-height: $sz-line-height;
                @include border-radius($sz-border-radius);
            }

            @if $enable-form-control and $enable-form-control-sizing {
                .form-control-#{$size} {
                    @extend %form-control-#{$size};
                }
            }

            %form-control-label-#{$size} {
                padding-top: calc(#{$sz-padding-y} + #{$input-border-width});
                padding-bottom: calc(#{$sz-padding-y} + #{$input-border-width});
                @include font-size($sz-font-size);
                line-height: $sz-line-height;
            }

            @if $enable-form-control-label and $enable-form-control-label-sizing {
                .form-control-label-#{$size} {
                    @extend %form-control-label-#{$size};
                }
            }
        }
    }

    // Form groups
    //
    // Designed to help with the organization and spacing of vertical forms. For
    // horizontal forms, use the predefined grid classes.
    @if $enable-form-group {
        .form-group {
            margin-bottom: $form-group-margin-bottom;
        }
    }

    @if $enable-form-text {
        .form-text {
            display: block;
            margin-top: $form-text-margin-top;
        }
    }


    // Form grid
    //
    // Special replacement for our grid system's `.row` for tighter form layouts.
    @if $enable-form-row {
        .form-row {
            display: flex;
            flex-wrap: wrap;
            margin-right: -$form-row-gutter;
            margin-left: -$form-row-gutter;

            > .col,
            > [class*="col-"] {
                padding-right: $form-row-gutter;
                padding-left: $form-row-gutter;
            }
        }
    }

    // Checkboxes and radios
    //
    // Indent the labels to position radios/checkboxes as hanging controls.
    @if $enable-form-check {
        .form-check {
            position: relative;
            display: block;
            padding-left: $form-check-input-gutter;
        }
        .form-check-label {
            margin-bottom: 0; // Override default `<label>` bottom margin
        }
        .form-check-input {
            position: absolute;
            margin-top: $form-check-input-margin-y;
            margin-left: -$form-check-input-gutter;
            @include transition($input-transition);

            &:disabled ~ .form-check-label {
                color: $form-check-disabled-color;
            }
        }
    }

    // Radios and checkboxes on same line
    @if $enable-form-check and $enable-form-check-inline {
        .form-check-inline {
            display: inline-flex;
            align-items: center;
            padding-left: 0; // Override base .form-check
            margin-right: $form-check-inline-margin-x;

            // Undo .form-check-input defaults and add some `margin-right`.
            .form-check-input {
                position: static;
                margin-top: 0;
                margin-right: $form-check-inline-input-margin-x;
                margin-left: 0;
            }
        }
    }

    // Form validation
    //
    // Provide feedback to users when form field values are valid or invalid. Works
    // primarily for client-side validation via scoped `:invalid` and `:valid`
    // pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
    // server side validation.
    @if $enable-form-validation {
        @each $state, $data in $form-validation-states {
            @include form-validation-state($state, map-get($data, color), map-get($data, icon));
        }
    }


    // Inline forms
    //
    // Make forms appear inline(-block) by adding the `.form-inline` class. Inline
    // forms begin stacked on extra small (mobile) devices and then go inline when
    // viewports reach > 36em/576px.
    //
    // Requires wrapping inputs and labels with `.form-group` for proper display of
    // default HTML form controls and our custom form controls (e.g., input groups).
    @if $enable-form-inline {
        .form-inline {
            display: flex;
            flex-flow: row wrap;
            align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

            // Because we use flex, the initial sizing of some items is collapsed,
            // such as groups and checkboxes, and don't occupy the full-width
            // (which is what we want for xs grid tier), so we force that here.
            .form-check,
            .form-group {
                width: 100%;
            }

            // Kick in the inline
            @include media-breakpoint-up(#{$form-inline-breakpoint}) {
                label {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: 0;
                }


                // Inline-block all the things for "inline"
                @if $enable-form-group {
                    .form-group {
                        display: flex;
                        flex: 0 0 auto;
                        flex-flow: row wrap;
                        align-items: center;
                        width: auto;
                        margin-bottom: 0;
                    }
                }

                // Allow folks to *not* use `.form-group`
                %form-no-group {
                    display: inline-block;
                    width: auto; // Prevent labels from stacking above inputs in `.form-group`
                    vertical-align: middle;
                }
                @if $enable-form-control {
                    .form-control {
                        @extend %form-no-group;
                    }
                }
                @if $enable-custom-select {
                    .custom-select {
                        @extend %form-no-group;
                    }
                }
                @if $enable-custom-range {
                    .custom-range {
                        @extend %form-no-group;
                    }
                }

                // Make static controls behave like regular ones
                @if $enable-form-control-static {
                    .form-control-static {
                        display: inline-block;
                    }
                }

                @if $enable-input-group {
                    .input-group {
                        width: auto;
                    }
                }

                @if $enable-form-control-label {
                    .form-control-label {
                        margin-bottom: 0;
                        vertical-align: middle;
                    }
                }

                // Remove default margin on radios/checkboxes that were used for stacking, and
                // then undo the floating of radios and checkboxes to match.
                @if $enable-form-check {
                    .form-check {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        width: auto;
                        padding-left: 0;
                    }
                    .form-check-input {
                        position: relative;
                        flex-shrink: 0;
                        margin-top: 0;
                        margin-right: $form-check-input-margin-x;
                        margin-left: 0;
                    }
                }

                // Custom form controls
                @if $enable-custom-control {
                    .custom-control {
                        align-items: center;
                        justify-content: center;
                    }
                    .custom-control-label {
                        margin-bottom: 0;
                    }
                }
            }
        }
    }
}
