// stylelint-disable selector-no-qualifying-type

// Textual form controls
.form-control {
    display: block;
    width: 100%;
    // Make inputs the height of their button counterpart (line-height + padding + border)
    height: $select-height;
    padding: $input-padding-y ($input-padding-x / 2);
    font-size: $font-size-base;
    line-height: $input-line-height;
    color: $input-color;
    background-color: $input-bg;
    background-clip: padding-box;
    border: $input-border-width solid $input-border-color;
    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
    @include border-radius($input-border-radius);
    @include box-shadow($input-box-shadow, 0 0 transparent);
    @include transition($input-transition);

    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand {
        background-color: transparent;
        border: 0;
    }

    // Customize the `:focus` state to imitate native WebKit styles.
    @include form-control-focus();

    // Placeholder
    &::placeholder {
        color: $input-placeholder-color;
        // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
        opacity: 1;
    }

    &:focus,
    &.focus {
        @if ($enable-shadows) {
            box-shadow: $input-focus-box-shadow-inner, $input-focus-box-shadow-outer;
        } @else {
            box-shadow: $input-focus-box-shadow-outer;
        }
    }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &:disabled,
    &[readonly] {
        background-color: $input-disabled-bg;
        // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
        opacity: 1;
    }

    &:disabled {
        color: $input-disabled-color;
        cursor: $cursor-disabled;
    }
}

select.form-control {
    &[size]:not([size="1"]),
    &[multiple] {
        height: auto;
    }

    &:focus::-ms-value {
        // Suppress the nested default white text on blue background highlight given to
        // the selected option text when the (still closed) <select> receives focus
        // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
        // match the appearance of the native widget.
        // See https://github.com/twbs/bootstrap/issues/19398.
        color: $input-focus-color;
        background-color: $input-focus-bg;
    }
}

textarea.form-control {
    height: auto;
}

// Make color, file, range inputs better match text inputs by forcing them to new lines.
.form-control-color,
.form-control-file,
.form-control-range {
    display: block;
}


// Labels
// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.form-control-label {
    padding-top: calc(#{$input-padding-y} + #{$input-border-width});
    padding-bottom: calc(#{$input-padding-y} + #{$input-border-width});
    margin-bottom: 0; // Override the `<label>` default
}

// Legends
// When you need the legend text to be the same size as regular labels.
.form-control-legend {
    margin-bottom: 0; // Override the `<legend>` default
    font-size: $font-size-base;
}

// Static form control text
// Apply class to an element to make any string of text align with labels in a
// horizontal form layout.
.form-control-static {
    // Size it appropriately next to real form controls
    display: block;
    width: 100%;
    padding-top: $input-padding-y;
    padding-bottom: $input-padding-y;
    margin-bottom: 0;
    line-height: $input-line-height;
    border: solid transparent;
    border-width: $input-border-width 0;
}

// Form control sizing
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-font-size:     map-get($dims, "font-size");
        $sz-padding-y:     map-get($dims, "padding-y") - ($input-line-height-delta * $sz-font-size / 2);
        $sz-padding-x:     map-get($dims, "padding-x");
        $sz-border-radius: map-get($dims, "border-radius");
        $sz-input-height:  (($sz-font-size * $input-line-height) + ($sz-padding-y * 2));
        $sz-select-height: calc(#{$sz-input-height} + #{($input-border-width * 2)});

        %form-control-#{$size} {
            height: $sz-select-height;
            padding: $sz-padding-y ($sz-padding-x / 2);
            font-size: $sz-font-size;
            @include border-radius($sz-border-radius);
        }

        .form-control-#{$size} {
            @extend %form-control-#{$size};
        }

        .form-control-label-#{$size},
        .form-control-static-#{$size} {
            padding-top: calc(#{$sz-padding-y} + #{$input-border-width});
            padding-bottom: calc(#{$sz-padding-y} + #{$input-border-width});
            font-size: $sz-font-size;
            //line-height: ($sz-font-size * $input-line-height);
        }

        .form-control-legend-#{$size} {
            font-size: $sz-font-size;
        }
    }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
    margin-bottom: $form-group-margin-bottom;
}

.form-text {
    display: block;
    margin-top: $form-text-margin-top;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.form-check {
    position: relative;
    display: block;
    margin-bottom: $form-check-margin-bottom;

    // Move up sibling radios or checkboxes for tighter spacing
    + .form-check {
        margin-top: $form-check-sibling-margin-top;
    }
}

.form-check-label {
    padding-left: $form-check-input-gutter;
    margin-bottom: 0; // Override default `<label>` bottom margin

    .form-check.disabled &,
    fieldset[disabled] & {
        color: $form-check-disabled-color;
        cursor: $cursor-disabled;
    }
}

.form-check-input {
    position: absolute;
    margin-top: $form-check-input-margin-y;
    margin-left: -$form-check-input-gutter;
    vertical-align: baseline;
    @include transition($input-transition);
}

// Radios and checkboxes on same line
.form-check-inline {
    display: inline-block;
    margin-right: $form-check-inline-margin-x;

    .form-check-label {
        vertical-align: middle;
    }
}

// Form control feedback states
// Apply contextual and semantic states to individual form controls.
.form-control-feedback {
    margin-top: $form-feedback-margin-top;
}

.form-control-icon {
    padding-right: ($input-padding-x * 3);
    background-repeat: no-repeat;
    background-position: center right ($input-height / 4);
    background-size: ($input-height / 2) ($input-height / 2);
}

// Form validation states
@if map-has-key($context-themes, "success") {
    .has-success {
        @include form-control-validation("success");

        .form-control-icon {
            background-image: $icon-success;
        }
    }
}
@if map-has-key($context-themes, "warning") {
    .has-warning {
        @include form-control-validation("warning");

        .form-control-icon {
            background-image: $icon-warning;
        }
    }
}
@if map-has-key($context-themes, "danger") {
    .has-danger {
        @include form-control-validation("danger");

        .form-control-icon {
            background-image: $icon-danger;
        }
    }
}

@if $enable-sizing {
    @each $size, $dims in $component-sizes {
        $sz-font-size:     map-get($dims, "font-size");
        $sz-padding-y:     map-get($dims, "padding-y") - ($input-line-height-delta * $sz-font-size / 2);
        $sz-padding-x:     map-get($dims, "padding-x");
        $sz-input-height:  (($sz-font-size * $input-line-height) + ($sz-padding-y * 2));

        .form-control-#{$size},
        .input-group-#{$size} > .form-control {
            &.form-control-icon {
                padding-right: ($sz-padding-x * 3);
                background-position: center right ($sz-input-height / 4);
                background-size: ($sz-input-height / 2) ($sz-input-height / 2);
            }
        }
    }
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach > 36em/576px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
.form-inline {
    display: flex;
    flex-flow: row wrap;
    align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

    // Because we use flex, the initial sizing of some items is collapsed,
    // such as groups and checkboxes, and don't occupy the full-width
    // (which is what we want for xs grid tier), so we force that here.
    .form-check,
    .form-group {
        width: 100%;
    }

    // Kick in the inline
    @include media-breakpoint-up(#{$form-inline-breakpoint}) {
        label {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0;
        }


        // Inline-block all the things for "inline"
        .form-group {
            display: flex;
            flex: 0 0 auto;
            flex-flow: row wrap;
            align-items: center;
            width: auto;
            margin-bottom: 0;
        }

        // Allow folks to *not* use `.form-group`
        .form-control,
        .custom-select {
            display: inline-block;
            width: auto; // Prevent labels from stacking above inputs in `.form-group`
            vertical-align: middle;
        }

        // Make static controls behave like regular ones
        .form-control-static {
            display: inline-block;
        }

        .input-group {
            width: auto;
        }

        .form-control-label {
            margin-bottom: 0;
            vertical-align: middle;
        }

        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match.
        .form-check {
            display: flex;
            align-items: center;
            justify-content: center;
            width: auto;
            margin-top: 0;
            margin-bottom: 0;
        }

        .form-check-label {
            padding-left: 0;
        }

        .form-check-input {
            position: relative;
            margin-top: 0;
            margin-right: $form-check-input-margin-x;
            margin-left: 0;
        }

        // Custom form controls
        .custom-control {
            display: flex;
            align-items: center;
            justify-content: center;
            padding-left: 0;
        }

        .custom-control-indicator {
            position: static;
            display: inline-block;
            margin-right: $form-check-input-margin-x; // Flexbox alignment means we lose our HTML space here, so we compensate.
            vertical-align: text-bottom;
        }

        // Re-override the feedback icon.
        .has-feedback .form-control-feedback {
            top: 0;
        }
    }
}
