@use "sass:map";
@use "../functions/str-util";
@use "../settings";
@use "../settings-options";
@use "border";
@use "box-shadow";
@use "font-size";

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($parent, $color, $bg, $border, $focus-shadow, $hover-color, $hover-bg, $hover-border, $active-color, $active-bg, $active-border, $disabled-color, $disabled-bg, $disabled-border) {
    $extender: str-util.str-replace($parent, ".", "");

    #{$parent} {
        color: $color;
        background-color: $bg;
        border-color: $border;
    }

    #{$parent}:hover {
        color: $hover-color;
        background-color: $hover-bg;
        border-color: $hover-border;
    }

    // Focus state
    %btn-variant-#{$extender}-focus {
        // No mixin use, so feedback is always present
        @if settings-options.$enable-shadows {
            @include box-shadow.box-shadow(settings.$btn-box-shadow, settings.$btn-focus-box-shadow-size rgba($focus-shadow, settings.$btn-focus-box-shadow-alpha));
        } @else {
            box-shadow: settings.$btn-focus-box-shadow-size rgba($focus-shadow, settings.$btn-focus-box-shadow-alpha);
        }
    }
    #{$parent}:focus {
        @extend %btn-variant-#{$extender}-focus;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input:focus ~ #{$parent} {
            @extend %btn-variant-#{$extender}-focus;
        }
    }

    // Disabled state
    %btn-variant-#{$extender}-disable {
        color: $disabled-color;
        background-color: $disabled-bg;
        border-color: $disabled-border;
    }
    #{$parent}.disabled,
    #{$parent}:disabled {
        @extend %btn-variant-#{$extender}-disable;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input {
            &[disabled],
            &:disabled {
                ~ #{$parent} {
                    @extend %btn-variant-#{$extender}-disable;
                }
            }
        }
    }

    // Active state
    %btn-variant-#{$extender}-active {
        color: $active-color;
        background-color: $active-bg;
        border-color: $active-border;
    }
    #{$parent}:active,
    #{$parent}.active,
    #{$parent}.open[data-cfw="dropdown"] {
        @extend %btn-variant-#{$extender}-active;
    }
    @if settings-options.$enable-btn-check {
        .btn-check-input:not([disabled]):not(:disabled):checked ~ #{$parent} {
            @extend %btn-variant-#{$extender}-active;
        }
    }

    // Active focus state
    @if settings-options.$enable-shadows {
        %btn-variant-#{$extender}-active-focus {
            @include box-shadow.box-shadow(settings.$btn-active-box-shadow, settings.$btn-focus-box-shadow-size rgba($focus-shadow, settings.$btn-focus-box-shadow-alpha));
        }
        #{$parent}:active:focus,
        #{$parent}.active:focus,
        #{$parent}.open[data-cfw="dropdown"]:focus {
            @extend %btn-variant-#{$extender}-active-focus;
        }
        @if settings-options.$enable-btn-check {
            .btn-check-input:not([disabled]):not(:disabled):checked:focus ~ #{$parent} {
                @extend %btn-variant-#{$extender}-active-focus;
            }
        }
    }
}

@mixin button-variant-control($parent, $colors) {
    $bg:              map.get($colors, "bg");
    $color:           map.get($colors, "color");
    $border:          map.get($colors, "border-color");
    $focus-shadow:    map.get($colors, "base");
    $hover-bg:        map.get($colors, "hover-bg");
    $hover-color:     map.get($colors, "hover-color");
    $hover-border:    map.get($colors, "hover-border-color");
    $active-bg:       map.get($colors, "active-bg");
    $active-color:    map.get($colors, "active-color");
    $active-border:   map.get($colors, "active-border-color");
    $disabled-bg:     if(map.has-key($colors, "disabled-bg"), map.get($colors, "disabled-bg"), $bg);
    $disabled-color:  if(map.has-key($colors, "disabled-color"), map.get($colors, "disabled-color"), $color);
    $disabled-border: if(map.has-key($colors, "disabled-border-color"), map.get($colors, "disabled-border-color"), $border);

    @include button-variant($parent, $color, $bg, $border, $focus-shadow, $hover-color, $hover-bg, $hover-border, $active-color, $active-bg, $active-border, $disabled-color, $disabled-bg, $disabled-border);
}

@mixin button-variant-control-outline($parent, $colors, $bg: settings.$btn-outline-bg) {
    $color:           map.get($colors, "base");
    $border:          map.get($colors, "bg");
    $focus-shadow:    map.get($colors, "base");
    $hover-bg:        map.get($colors, "bg");
    $hover-color:     map.get($colors, "hover-color");
    $hover-border:    map.get($colors, "border-color");
    $active-bg:       map.get($colors, "hover-bg");
    $active-color:    map.get($colors, "hover-color");
    $active-border:   map.get($colors, "active-border-color");
    $disabled-bg:     if(map.has-key($colors, "disabled-bg"), map.get($colors, "disabled-bg"), $bg);
    $disabled-color:  if(map.has-key($colors, "disabled-color"), map.get($colors, "disabled-color"), $color);
    $disabled-border: if(map.has-key($colors, "disabled-border-color"), map.get($colors, "disabled-border-color"), $border);

    @include button-variant($parent, $color, $bg, $border, $focus-shadow, $hover-color, $hover-bg, $hover-border, $active-color, $active-bg, $active-border, $disabled-color, $disabled-bg, $disabled-border);
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    @if $padding-y == null and $padding-x == null {
        // No padding output
    } @else if $padding-y == null or $padding-x == null {
        $padding-y: if($padding-y != null, $padding-y, settings.$btn-padding-y);
        $padding-x: if($padding-x != null, $padding-x, settings.$btn-padding-x);
        padding: $padding-y $padding-x;
    } @else {
        padding: $padding-y $padding-x;
    }
    @include font-size.font-size($font-size);
    line-height: $line-height;
    // Provide a fallback to override to the browser default
    @include border.border-radius($border-radius, 0);
}
