/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin check-gutter-change($breakpoint, $gutters: $grid-gutter-widths) {
    $prev-breakpoint: breakpoint-prev($breakpoint, $gutters);

    @if $prev-breakpoint {
        $prev-gutter: map-get($gutters, $prev-breakpoint);
        $curr-gutter: map-get($gutters, $breakpoint);

        @if $prev-gutter != $curr-gutter {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin make-container($gutters: $grid-gutter-widths) {
    margin-right: auto;
    margin-left: auto;
    @if not $enable-flex-full {
        @include clearfix();
    }

    @each $breakpoint in map-keys($gutters) {
        @include check-gutter-change($breakpoint, $gutters) {
            @include media-breakpoint-up($breakpoint) {
                $gutter: map-get($gutters, $breakpoint);
                padding-right: ($gutter / 2);
                padding-left: ($gutter / 2);
            }
        }
    }
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            width: $container-max-width;
        }
    }
}

@mixin make-row($gutters: $grid-gutter-widths) {
    @each $breakpoint in map-keys($gutters) {
        @include check-gutter-change($breakpoint, $gutters) {
            @include media-breakpoint-up($breakpoint) {
                $gutter: map-get($gutters, $breakpoint);
                margin-right: ($gutter / -2);
                margin-left: ($gutter / -2);
            }
        }
    }

    @if $enable-flex-opt {
        display: block;
        flex-wrap: initial;
    }

    @if $enable-flex-full {
        display: flex;
        flex-wrap: wrap;
    } @else {
        @include clearfix();
    }
}

@mixin make-col($size, $columns: $grid-columns, $flex-mode: false) {
    @if $flex-mode {
        flex: 0 0 percentage($size / $columns);
        // Add a `max-width` to ensure content within each column does not blow out
        // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
        // do not appear to require this.
        max-width: percentage($size / $columns);
    } @else {
        width: percentage($size / $columns);
    }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type == push {
        @include make-col-push($size, $columns);
    } @else if $type == pull {
        @include make-col-pull($size, $columns);
    } @else if $type == offset {
        @include make-col-offset($size, $columns);
    }
}

// Grid generation
//
// Generate the correct number of grid classes given any value of `$grid-columns`

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    $breakpoint-counter: 0;
    @each $breakpoint in map-keys($breakpoints) {
        $bprule: breakpoint-designator($breakpoint);

        $breakpoint-counter: ($breakpoint-counter + 1);
        @include media-breakpoint-up($breakpoint, $breakpoints) {

            // Use a placeholders selector to extend upon
            %col-#{$breakpoint} {
                float: left;
            }

            @for $i from 1 through $columns {
                .col#{$bprule}-#{$i} {
                    @include make-col($i, $columns, $enable-flex-full);

                    // No floating if in full flex mode
                    @if not $enable-flex-full {
                        @extend %col-#{$breakpoint};
                    }

                    // Opt-in flex mode
                    @if $enable-flex-opt {
                        .row-flex & {
                            @include make-col($i, $columns, $enable-flex-opt);
                        }
                    }
                }
            }

            @each $modifier in (pull, push) {
                @for $i from 0 through $columns {
                    .#{$modifier}#{$bprule}-#{$i} {
                        @include make-col-modifier($modifier, $i, $columns);
                    }
                }
            }

            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-0
                    .offset#{$bprule}-#{$i} {
                        @include make-col-modifier(offset, $i, $columns);
                    }
                }
            }

            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            %col-flex-basic-#{$breakpoint} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            %col-flex-auto-#{$breakpoint} {
                flex: 0 0 auto;
                width: auto;
            }

            @if $enable-flex-full {
                .col#{$bprule} {
                    @extend %col-flex-basic-#{$breakpoint};
                }
                .col#{$bprule}-auto {
                    @extend %col-flex-auto-#{$breakpoint};
                }
            }
            @if $enable-flex-opt {
                .row-flex .col#{$bprule} {
                    @extend %col-flex-basic-#{$breakpoint};
                }
                .row-flex .col#{$bprule}-auto {
                    @extend %col-flex-auto-#{$breakpoint};
                }
            }
        }
    }
}
