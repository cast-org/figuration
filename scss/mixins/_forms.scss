// Calculate input height
// Make inputs the height of their button counterpart (line-height + padding + border)
@function calc-input-height-inner($padding-y, $line-height) {
    @if $padding-y == null and $line-height == null {
        @return null;
    }
    $height-font:    1em * if($line-height != null, $line-height, $input-line-height);
    $height-padding: 2 * if($padding-y != null, $padding-y, $input-padding-y);

    $height-inner: #{$height-font} unquote("+") #{$height-padding};

    @return calc(#{$height-inner});
}

@function calc-input-height-outer($padding-y, $line-height) {
    @if $padding-y == null and $line-height == null {
        @return null;
    }
    $height-font:    1em * if($line-height != null, $line-height, $input-line-height);
    $height-padding: 2 * if($padding-y != null, $padding-y, $input-padding-y);
    $height-border:  $input-border-width * 2;

    $height-inner: #{$height-font} unquote("+") #{$height-padding};
    $height-outer: #{$height-inner} unquote("+") #{$height-border};

    @return calc(#{$height-outer});
}

// Form validation states
// Generate the form validation CSS for valid and invalid states.
@mixin form-validation-state-selector($state) {
    @if ($state == "valid" or $state == "invalid") {
        .was-validated &:#{$state},
        &.is-#{$state} {
            @content;
        }
    } @else {
        &.is-#{$state} {
            @content;
        }
    }
}

@mixin form-validation-state-selector-icon($state) {
    @if ($state == "valid" or $state == "invalid") {
        .was-validated &.has-validation-icon:#{$state},
        &.has-validation-icon.is-#{$state} {
            @content;
        }
    } @else {
        &.has-validation-icon.is-#{$state} {
            @content;
        }
    }
}

@mixin form-validation-state($state, $color, $icon) {
    @if $enable-form-validation-feedback {
        .#{$state}-feedback {
            display: none;
            width: 100%;
            margin-top: $form-feedback-margin-top;
            @include font-size($form-feedback-font-size);
            color: $color;
        }
    }

    @if $enable-form-validation-tooltip {
        .#{$state}-tooltip {
            position: absolute;
            top: 100%;
            z-index: 5;
            display: none;
            max-width: 100%; // Contain to parent when possible
            padding: $tooltip-padding-y $tooltip-padding-x;
            margin-top: .125rem;
            @include font-size($tooltip-font-size);
            color: color-auto-contrast($color);
            background-color: rgba($color, $tooltip-opacity);
            @include border-radius($tooltip-border-radius);
        }
    }

    .form-control {
        @include form-validation-state-selector($state) {
            border-color: $color;

            &:focus {
                border-color: $color;
                box-shadow: $input-focus-box-shadow-size rgba($color, $input-focus-box-shadow-alpha);
            }

            ~ .#{$state}-feedback,
            ~ .#{$state}-tooltip {
                display: block;
            }
        }

        @if $enable-validation-icons {
            @include form-validation-state-selector-icon($state) {
                //background: $icon no-repeat right $form-feedback-icon-offset center / $form-feedback-icon-width $form-feedback-icon-height;
                background-image: $icon;
                background-repeat: no-repeat;
                background-position: right $form-feedback-icon-offset center;
                background-size: $form-feedback-icon-width $form-feedback-icon-height;
            }
        }
    }

    @if $enable-validation-icons {
        @if $enable-form-control {
            .form-control:not(textarea):not(select) {
                @include form-validation-state-selector-icon($state) {
                    padding-right: calc(#{$input-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset});
                }
            }

            // Apply both the select indicator and validaton icons.
            // stylelint-disable-next-line selector-no-qualifying-type
            select.form-control:not([size]:not([size="1"])):not([multiple]) {
                @include form-validation-state-selector-icon($state) {
                    padding-right: calc(#{$input-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset} + #{$form-select-indicator-width} + #{$form-select-indicator-offset});
                    background-image: $form-select-indicator-image, $icon;
                    background-repeat: no-repeat, no-repeat;
                    background-position: right $form-select-indicator-offset center, right calc(#{$form-feedback-icon-offset} + #{$form-select-indicator-width} + #{$form-select-indicator-offset}) center;
                    background-size: $form-select-indicator-width $form-select-indicator-height, $form-feedback-icon-width $form-feedback-icon-height;
                }
            }

            // Icon is placed on left, what should hopefully be the opposite side of the scrollbar,
            // otherwise icon can become obscured by the scrollbar.
            // stylelint-disable selector-no-qualifying-type
            select.form-control[size]:not([size="1"]),
            select.form-control[multiple],
            textarea.form-control {
                @include form-validation-state-selector-icon($state) {
                    padding-left: calc(#{$input-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset});
                    background-position: left $form-feedback-icon-offset center;
                }
            }
            // stylelint-enable selector-no-qualifying-type
        }
    }

    @if $enable-form-control-special {
        .form-control-file {
            @include form-validation-state-selector($state) {
                ~ .#{$state}-feedback,
                ~ .#{$state}-tooltip {
                    display: block;
                }
            }
        }
    }

    @if $enable-form-check {
        .form-check-input {
            @include form-validation-state-selector($state) {
                ~ .form-check-label {
                    color: $color;
                }

                ~ .#{$state}-feedback,
                ~ .#{$state}-tooltip {
                    display: block;
                }
            }
        }
    }

    @if $enable-custom-control {
        .custom-control-input {
            @include form-validation-state-selector($state) {
                ~ .custom-control-label {
                    color: $color;
                }

                ~ .custom-control-indicator {
                    &::before {
                        border-color: $color;
                    }
                }

                ~ .#{$state}-feedback,
                ~ .#{$state}-tooltip {
                    display: block;
                }

                &:checked {
                    ~ .custom-control-indicator::before {
                        background-color: $color;
                        border-color: $color;
                    }
                }

                &:focus {
                    ~ .custom-control-indicator::before {
                        box-shadow: $input-focus-box-shadow-size rgba($color, $input-focus-box-shadow-alpha);
                    }
                }
            }
        }
    }

    // custom file
    @if $enable-custom-file {
        .custom-file-input {
            @include form-validation-state-selector($state) {
                ~ .custom-file-label {
                    border-color: $color;

                    &::after { border-color: inherit; }
                }

                ~ .#{$state}-feedback,
                ~ .#{$state}-tooltip {
                    display: block;
                }

                &:focus-within, // Firefox workaround
                &:focus {
                    ~ .custom-file-label {
                        border-color: $color;
                        box-shadow: $input-focus-box-shadow-size rgba($color, $input-focus-box-shadow-alpha);
                    }
                }
            }
        }
    }

    @if $enable-sizing {
        @each $size, $dims in $input-sizes {
            $sz-padding-x:     map-get($dims, "padding-x");

            @if $sz-padding-x != null {
                @if $enable-validation-icons {
                    @if $enable-form-control {
                        .form-control-#{$size}:not(textarea),
                        .input-group-#{$size} > .form-control:not(textarea) {
                            @include form-validation-state-selector-icon($state) {
                                padding-right: calc(#{$sz-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset});
                            }
                        }

                        // stylelint-disable-next-line selector-no-qualifying-type
                        textarea.form-control-#{$size},
                        .input-group-#{$size} > textarea.form-control {
                            @include form-validation-state-selector-icon($state) {
                                padding-left: calc(#{$sz-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset});
                            }
                        }

                        // stylelint-disable-next-line selector-no-qualifying-type
                        select.form-control-#{$size},
                        .input-group-#{$size} > select.form-control {
                            @include form-validation-state-selector-icon($state) {
                                padding-right: calc(#{$sz-padding-x} + #{$form-feedback-icon-width} + #{$form-feedback-icon-offset} + #{$form-select-indicator-width} + #{$form-select-indicator-offset});

                                &[size]:not([size="1"]),
                                &[multiple] {
                                    padding-right: $sz-padding-x;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-focus-border-color` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus() {
    &:focus {
        color: $input-focus-color;
        background-color: $input-focus-bg;
        border-color: $input-focus-border-color;
        outline: 0;
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows {
            box-shadow: $input-box-shadow, $input-focus-box-shadow;
        } @else {
            box-shadow: $input-focus-box-shadow;
        }
    }
}

// Custom Range
@mixin custom-range-track() {
    box-sizing: border-box;
    width: 100%;
    height: $custom-range-track-height;
    margin: 0 $custom-range-thumb-focus-box-shadow-width;
    color: transparent;
    border: $custom-range-track-border;
    @include border-radius($custom-range-track-border-radius);
    @include box-shadow($custom-range-track-box-shadow);
}

@mixin custom-range-thumb() {
    box-sizing: border-box;
    width: $custom-range-thumb-width;
    height: $custom-range-thumb-height;
    background-color: $custom-range-thumb-bg;
    border: $custom-range-thumb-border;
    @include border-radius($custom-range-thumb-border-radius);
    @include box-shadow($custom-range-thumb-box-shadow);
    @include transition($input-transition);
    appearance: none;

    &:active {
        background-color: $custom-range-thumb-active-bg;
    }
}
