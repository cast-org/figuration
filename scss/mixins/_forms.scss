@use "sass:map";
@use "sass:string";
@use "../settings";
@use "../settings-options";
@use "../functions/calc-util";
@use "../functions/color-util";
@use "../functions/str-util";
@use "border";
@use "box-shadow";
@use "transition";
@use "../vendor/rfs";

// Calculate input height
// Make inputs the height of their button counterpart (line-height + padding + border)
@function calc-input-height-inner($padding-y, $line-height) {
  @if $padding-y == null and $line-height == null {
    @return null;
  }
  $lh: if($line-height != null, $line-height, $input-line-height);
  $lh: str-util.strip-calc($lh);

  $height-font:    1em * $lh;
  $height-padding: 2 * if($padding-y != null, $padding-y, $input-padding-y);

  $height-inner: calc-util.add($height-font, $height-padding);

  @return $height-inner;
}

@function calc-input-height-outer($padding-y, $line-height) {
  @if $padding-y == null and $line-height == null {
    @return null;
  }
  $lh: if($line-height != null, $line-height, settings.$input-line-height);
  $lh: str-util.strip-calc($lh);

  $height-font:    1em * $lh;
  $height-padding: 2 * if($padding-y != null, $padding-y, settings.$input-padding-y);
  $height-border:  settings.$input-border-width * 2;

  $height-inner: #{$height-font} string.unquote("+") #{$height-padding};
  $height-outer: calc-util.add($height-inner, $height-border);

  @return $height-outer;
}

// Form validation states
// Generate the form validation CSS for valid and invalid states.
// This mixin uses an `if()` technique to be compatible with Dart Sass
// See https://github.com/sass/sass/issues/1873#issuecomment-152293725 for more details
@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated #{if(&, "&", "")}:#{$state},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state-selector-icon($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated &.has-validation-icon:#{$state},
    &.has-validation-icon.is-#{$state} {
      @content;
    }
  } @else {
    &.has-validation-icon.is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state(
  $state,
  $color,
  $icon,
  $tip-color: color-util.color-auto-contrast($color),
  $tip-bg: rgba($color, settings.$tooltip-opacity),
  $focus-box-shadow: settings.$input-focus-box-shadow-size rgba($color, settings.$input-focus-box-shadow-alpha)
) {
  @if settings-options.$enable-form-validation-feedback {
    .#{$state}-feedback {
      display: none;
      width: 100%;
      margin-top: settings.$form-feedback-margin-top;
      @include rfs.font-size(settings.$form-feedback-font-size);
      color: $color;
    }
  }

  @if settings-options.$enable-form-validation-tooltip {
    .#{$state}-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      max-width: 100%; // Contain to parent when possible
      padding: settings.$tooltip-padding-y settings.$tooltip-padding-x;
      margin-top: .125rem;
      @include rfs.font-size(settings.$tooltip-font-size);
      color: $tip-color;
      background-color: $tip-bg;
      @include border.border-radius(settings.$tooltip-border-radius);
    }
  }

  %validation-feedback-tooltip-show-#{$state} {
    display: block;
  }

  @include form-validation-state-selector($state) {
    @if settings-options.$enable-form-validation-feedback {
      ~ .#{$state}-feedback {
        @extend %validation-feedback-tooltip-show-#{$state};
      }
    }

    @if settings-options.$enable-form-validation-tooltip {
      ~ .#{$state}-tooltip {
        @extend %validation-feedback-tooltip-show-#{$state};
      }
    }
  }

  @if settings-options.$enable-form-control {
    .form-control {
      @include form-validation-state-selector($state) {
        border-color: $color;

        &:focus {
          border-color: $color;
          @if settings.$enable-shadows {
            @include box-shadow.box-shadow(settings.$input-box-shadow, $focus-box-shadow);
          } @else {
            box-shadow: $focus-box-shadow;
          }
        }
      }

      @if settings-options.$enable-form-validation-icon {
        @include form-validation-state-selector-icon($state) {
          //background: $icon no-repeat right $form-feedback-icon-offset center / $form-feedback-icon-width $form-feedback-icon-height;
          background-image: $icon;
          background-repeat: no-repeat;
          background-position: right settings.$form-feedback-icon-offset center;
          background-size: settings.$form-feedback-icon-width settings.$form-feedback-icon-height;
        }
      }
    }

    .input-group .form-control {
      @include form-validation-state-selector($state) {
        @if $state == "valid" {
          z-index: 1;
        } @else if $state == "invalid" {
          z-index: 2;
        }
        &:focus {
          z-index: 3;
        }
      }
    }
  }

  @if settings-options.$enable-form-control and settings-options.$enable-form-validation-icon {
    .form-control:not(textarea):not(select) {
      @include form-validation-state-selector-icon($state) {
        padding-right: calc-util.add(settings.$input-padding-x, calc-util.add(settings.$form-feedback-icon-width, settings.$form-feedback-icon-offset, false));
      }
    }

    // Apply both the select indicator and validaton icons.
    // stylelint-disable-next-line selector-no-qualifying-type
    select.form-control:not([size]):not([size="1"]):not([multiple]) {
      @include form-validation-state-selector-icon($state) {
        padding-right: calc-util.add(settings.$input-padding-x, calc-util.add(settings.$form-feedback-icon-width, calc-util.add(settings.$form-feedback-icon-offset, calc-util.add(settings.$form-select-indicator-width, settings.$form-select-indicator-offset, false), false), false));
        background-image: settings.$form-select-indicator-image, $icon;
        background-repeat: no-repeat, no-repeat;
        background-position: settings.$form-select-indicator-position, settings.$form-feedback-select-icon-position;
        background-size: settings.$form-select-indicator-width settings.$form-select-indicator-height, settings.$form-feedback-icon-width settings.$form-feedback-icon-height;
      }
    }

    // Icon is placed on left, what should hopefully be the opposite side of the scrollbar,
    // otherwise icon can become obscured by the scrollbar.
    // stylelint-disable selector-no-qualifying-type
    select.form-control[size]:not([size="1"]),
    select.form-control[multiple],
    textarea.form-control {
      @include form-validation-state-selector-icon($state) {
        padding-left: calc-util.add(settings.$input-padding-x, calc-util.add(settings.$form-feedback-icon-width, settings.$form-feedback-icon-offset, false));
        background-position: left settings.$form-feedback-icon-offset center;
      }
    }
    // stylelint-enable selector-no-qualifying-type
  }

  @if settings-options.$enable-form-check {
    @include form-validation-state-selector($state) {
      ~ .form-check-label {
        color: $color;
      }
    }
  }

  @if settings-options.$enable-form-check and (settings-options.$enable-form-check-checkradio or settings-options.$enable-form-check-switch) {
    .form-check-input {
      @include form-validation-state-selector($state) {
        ~ .form-check-label {
          &::before {
            border-color: $color;
          }
        }

        &:checked {
          ~ .form-check-label {
            &::before {
              background-color: $color;
              border-color: $color;
            }
          }
        }

        &:focus {
          ~ .form-check-label {
            &::before {
              @if settings.$enable-shadows {
                @include box-shadow.box-shadow(settings.$input-box-shadow, $focus-box-shadow);
              } @else {
                box-shadow: $focus-box-shadow;
              }
            }
          }
        }
      }
    }
  }

  @if settings-options.$enable-form-check and settings-options.$enable-form-check-switch {
    .form-switch .form-check-input {
      @include form-validation-state-selector($state) {
        ~ .form-check-label {
          &::before {
            background-color: color-util.color-auto-contrast($color);
            border-color: $color;
          }
          &::after {
            background-color: $color;
            border-color: $color;
          }
        }

        &:checked {
          ~ .form-check-label {
            &::before {
              background-color: color-util.color-auto-contrast($color);
              border-color: $color;
            }
            &::after {
              background-color: $color;
              border-color: $color;
            }
          }
        }

        &:focus {
          ~ .form-check-label {
            &::before {
              @if settings.$enable-shadows {
                @include box-shadow.box-shadow(settings.$form-switch-track-box-shadow, $focus-box-shadow);
              } @else {
                box-shadow: $focus-box-shadow;
              }
            }
            &::after {
              box-shadow: settings.$form-switch-thumb-focus-box-shadow;
            }
          }
        }
      }
    }
  }

  // Form file
  @if settings-options.$enable-form-file {
    .form-file-input {
      @include form-validation-state-selector($state) {
        ~ .form-file-label {
          border-color: $color;
        }

        &:focus {
          ~ .form-file-label {
            border-color: $color;
            @if settings.$enable-shadows {
              @include box-shadow.box-shadow(settings.$input-box-shadow, $focus-box-shadow);
            } @else {
              box-shadow: $focus-box-shadow;
            }
          }
        }

        &:focus-within {
          ~ .form-file-label {
            border-color: $color;
            @if settings.$enable-shadows {
              @include box-shadow.box-shadow(settings.$input-box-shadow, $focus-box-shadow);
            } @else {
              box-shadow: $focus-box-shadow;
            }
          }
        }
      }
    }
  }

  @if settings.$enable-sizing {
    @each $size, $dims in settings.$input-sizes {
      $sz-padding-x:     map.get($dims, "padding-x");

      @if $sz-padding-x != null {
        @if settings-options.$enable-form-validation-icon {
          @if settings-options.$enable-form-control {
            .form-control-#{$size}:not(textarea),
            .input-group-#{$size} > .form-control:not(textarea) {
              @include form-validation-state-selector-icon($state) {
                padding-right: calc-util.add($sz-padding-x, calc-util.add(settings.$form-feedback-icon-width, settings.$form-feedback-icon-offset, false));
              }
            }

            textarea.form-control-#{$size},
            .input-group-#{$size} > textarea.form-control {
              @include form-validation-state-selector-icon($state) {
                padding-left: calc-util.add($sz-padding-x, calc-util.add(settings.$form-feedback-icon-width, settings.$form-feedback-icon-offset, false));
              }
            }

            select.form-control-#{$size},
            .input-group-#{$size} > select.form-control {
              @include form-validation-state-selector-icon($state) {
                padding-right: calc-util.add($sz-padding-x, calc-util.add(settings.$form-feedback-icon-width, calc-util.add(settings.$form-feedback-icon-offset, calc-util.add(settings.$form-select-indicator-width, settings.$form-select-indicator-offset, false), false), false));

                &[size]:not([size="1"]),
                &[multiple] {
                  padding-right: $sz-padding-x;
                }
              }
            }
          }
        }
      }
    }
  }
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-focus-border-color` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus() {
  &:focus {
    color: settings.$input-focus-color;
    background-color: settings.$input-focus-bg;
    border-color: settings.$input-focus-border-color;
    outline: 0;
    @if settings.$enable-shadows {
      @include box-shadow.box-shadow(settings.$input-box-shadow, $input-focus-box-shadow);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: settings.$input-focus-box-shadow;
    }
  }
}

// Form Range
@mixin form-range-track() {
  box-sizing: border-box;
  width: 100%;
  height: settings.$form-range-track-height;
  margin: 0 settings.$form-range-thumb-focus-box-shadow-width;
  color: transparent;
  cursor: settings.$form-range-track-cursor;
  border: settings.$form-range-track-border;
  @include border.border-radius(settings.$form-range-track-border-radius);
  @include box-shadow.box-shadow(settings.$form-range-track-box-shadow);
}

@mixin form-range-thumb() {
  box-sizing: border-box;
  width: settings.$form-range-thumb-width;
  height: settings.$form-range-thumb-height;
  appearance: none;
  background-color: settings.$form-range-thumb-bg;
  border: settings.$form-range-thumb-border;
  @include border.border-radius(settings.$form-range-thumb-border-radius);
  @include box-shadow.box-shadow(settings.$form-range-thumb-box-shadow);
  @include transition.transition(settings.$input-transition);

  &:active {
    background-color: settings.$form-range-thumb-active-bg;
  }
}
