// stylelint-disable property-disallowed-list

// Make sure only one responsive typography method is enabled.
@if $enable-rfs-fluid and $enable-rfs-scale {
    @error "More than one Responsive Typography (font-size) method has been selected. Please update your settings to only use one of the available Responsive Typography methods.";
}

// Calculate minimum font size as unitless rem equivalent.
// stylelint-disable scss/dollar-variable-default
$fs-minimum: rem($responsive-font-size-minimum-size);
$fs-minimum: strip-unit($fs-minimum);
// stylelint-enable scss/dollar-variable-default

@mixin font-size($fs, $important: false) {
    // Cache $fs unit
    $fs-unit: if(type-of($fs) == "number", unit($fs), false);

    // Add !important rule to the append if set
    $fs-append: if($important, " !important", "");

    // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $fs is 0, just print the value.
    @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem" or $fs == 0 {
        font-size: #{$fs}#{$fs-append};
    } @else if ($enable-rfs-fluid) {
        // Use fluid variant
        @include font-size-fluid($fs, $fs-append);
    } @else if ($enable-rfs-scale) {
        // Use scaled variant
        @include font-size-scale($fs, $fs-append);
    } @else {
        // No variant selected, just print the font-size.
        font-size: #{$fs}#{$fs-append};
    }
}

// Responsive typography sizing using viewport ratio
@mixin font-size-fluid($fs, $fs-append) {
    // Check breakpoint unit.
    $fs-breakpoint-unit: unit($responsive-font-size-fluid-breakpoint);
    @if $fs-breakpoint-unit != em {
        @error "`#{$fs-breakpoint-unit}` is not a valid unit for $responsive-font-size-fluid-breakpoint. Please use `em`.";
    }

    // Check scaling factor.
    @if type-of($responsive-font-size-fluid-factor) != "number" or $responsive-font-size-fluid-factor < 1 {
        @error "`#{$responsive-font-size-fluid-factor}` is not a valid  $responsive-font-size-fluid-factor, it must be greater or equal to 1.";
    }

    // Calculate breakpoint as unitless rem equivalent.
    $fs-breakpoint: rem($responsive-font-size-fluid-breakpoint);
    $fs-breakpoint: strip-unit($fs-breakpoint);

    // Calculate font size as unitless rem equivalent.
    $fs: rem($fs);
    $fs: strip-unit($fs);

    // Set default font-size output.
    $fs-static: #{$fs}rem#{$fs-append};

    // Only add media query if font-size is bigger than the minimum font-size.
    // If $responsive-font-size-fluid-factor == 1, no rescaling will take place.
    $fs-fluid: null;
    @if $fs > $fs-minimum and $responsive-font-size-fluid-factor != 1 {
        // Calculate minimum font-size for given font-size.
        $fs-min: divide($fs-minimum + ($fs - $fs-minimum), $responsive-font-size-fluid-factor);
        // Calculate difference between given font-size and minimum font-size for given font-size.
        $fs-diff: $fs - $fs-min;

        // Minimum font-size formatting.
        $fs-min: #{$fs-min}rem;

        // If two-dimensional, use smallest of screen width and height.
        $variable-unit: if($responsive-font-size-fluid-two-dimensional, vmin, vw);

        // Calculate the variable width between 0 and $fs-breakpoint.
        // stylelint-disable-next-line stylistic/function-whitespace-after
        $variable-width: divide($fs-diff * 100, $fs-breakpoint)#{$variable-unit};

        // Set the calculated font-size.
        // stylelint-disable-next-line stylistic/function-whitespace-after
        $fs-fluid: add($fs-min, $variable-width)#{$fs-append};
    }

    // Render output.
    @if $fs-fluid == null {
        // Only render static font-size if no fluid font-size is available.
        font-size: $fs-static;
    } @else {
        $mq-value: $responsive-font-size-fluid-breakpoint;

        @if $responsive-font-size-generate-static {
            // Adding an extra class increases specificity, which
            // prevents the media query from overriding the font size.
            &,
            .font-size-static &,
            &.font-size-static {
                font-size: $fs-static;
            }
        } @else {
            font-size: $fs-static;
        }

        // stylelint-disable media-query-no-invalid
        @if $responsive-font-size-fluid-two-dimensional {
            @media (max-width: #{$mq-value}), (max-height: #{$mq-value}) {
                font-size: $fs-fluid;
            }
        } @else {
            @media (max-width: #{$mq-value}) {
                font-size: $fs-fluid;
            }
        }
        // stylelint-enable media-query-no-invalid
    }
}

// Responsive typography sizing using breakpoint scaling
@mixin font-size-scale($fs, $fs-append) {
    // Calculate font size as unitless rem equivalent.
    $fs: rem($fs);
    $fs: strip-unit($fs);

    // Set default font-size output.
    $fs-static: #{$fs}rem#{$fs-append};
    $fs-prev: null;
    @each $breakpoint in map-keys($grid-breakpoints) {
        $factor: map-get($responsive-font-size-scale-factor, $breakpoint);

        // Only add media query if font-size is bigger than the minimum font-size.
        // If $factor == 1, no rescaling will take place.
        $fs-scaled: null;
        $fs-output: null;
        @if $fs > $fs-minimum and $factor != 1 {
            $fs-scaled: $fs-minimum + ($fs - $fs-minimum) * $factor;
            $fs-output: #{$fs-scaled}rem#{$fs-append};
        }

        // Rendering.
        @if $fs-scaled == null {
            @if $fs-prev != $fs {
                // Only render static font-size if no scaled font-size is available.
                @if $responsive-font-size-generate-static and $fs > $fs-minimum {
                    @include media-breakpoint-up($breakpoint) {
                        font-size: $fs-static;
                    }
                    // Adding an extra class increases specificity, which
                    // prevents the media query from overriding the font size.
                    .font-size-static &,
                    &.font-size-static {
                        font-size: $fs-static;
                    }
                } @else {
                    @include media-breakpoint-up($breakpoint) {
                        font-size: $fs-static;
                    }
                }
            }
            $fs-prev: $fs;
        } @else {
            @if $fs-prev != $fs-scaled {
                @include media-breakpoint-up($breakpoint) {
                    font-size: $fs-output;
                }
            }
            $fs-prev: $fs-scaled;
        }
    }
}
